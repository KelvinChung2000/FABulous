from FABulous.fabric_definition.SwitchMatrix import MuxPort
from FABulous.fabric_definition.define import IO, Side
from FABulous.fabric_definition.Port import TilePort, Port, BelPort

class {{ tile.name }}_ports:
    def __init__(self):
        # tile ports
    {%- for p in tile.ports %}
        self.{{ p.name }} = MuxPort({{ p.createSelf() }}, isTilePort=True, isBus={{ p.isBus }}, bitWidth={{ p.wireCount }})
    {%- endfor %}

        # bel ports
    {%- for bel in tile.bels -%}
    {%- for p in bel.inputs %}
        self.{{ bel.prefix }}{{ p.name }} = MuxPort({{ p.createSelf() }}, isBelPort=True, isBus={{ p.isBus }}, bitWidth={{ p.wireCount }})
    {%- endfor %}

    {%- for p in bel.outputs %}
        self.{{ bel.prefix }}{{ p.name }} = MuxPort({{ p.createSelf() }}, isBelPort=True, isBus={{ p.isBus }}, bitWidth={{ p.wireCount }})
    {%- endfor %}

    {%- endfor %}

    def NewWire(self, srcName: str, dstName: str, wireCount: int) -> (MuxPort, MuxPort):
        portSrc = MuxPort(Port(name=srcName, ioDirection=IO.INPUT, wireCount=wireCount, isBus=False), bitWidth=wireCount, isCreated=True)
        setattr(self, srcName, portSrc)
        portDst = MuxPort(Port(name=dstName, ioDirection=IO.OUTPUT, wireCount=wireCount, isBus=False), bitWidth=wireCount, isCreated=True)
        setattr(self, dstName, portDst)
        return portSrc, portDst

    def __getitem__(self, key: str) -> MuxPort:
        return getattr(self, key)

    def __setitem__(self, key: str, value: MuxPort):
        pass
