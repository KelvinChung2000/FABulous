from FABulous.fabric_definition.SwitchMatrix import MuxPack
from FABulous.fabric_definition.define import IO
from FABulous.fabric_definition.Port import TilePort, Port, BelPort


class {{ tileName }}_ports:
    def __init__(self, tilePorts: list[TilePort],
                 belInputs: list[BelPort], belOutputs: list[BelPort], belShared: list[BelPort]):
        # tile ports
    {%- if subTileCount == 1 %}
    {%- for (st, p) in tilePorts %}
        self.{{ p.name }} = MuxPack(tilePorts[{{ loop.index0 }}])
    {%- endfor %}
    {% else %}
    {%- for (st, p) in tilePorts %}
        self.{{ st }}_{{ p.name }} = MuxPack(tilePorts[{{ loop.index0 }}])
    {%- endfor %}
    {% endif %}
        # bel input ports
    {%- for p in belInputs %}
        self.{{ p.name }} = MuxPack(belInputs[{{ loop.index0 }}])
    {%- endfor %}

        # bel output ports
    {%- for p in belOutputs %}
        self.{{ p.name }} = MuxPack(belOutputs[{{ loop.index0 }}])
    {%- endfor %}

        # bel shared ports
    {%- for p in belShared %}
        self.{{ p.sharedWith }} = MuxPack(belShared[{{ loop.index0 }}])
    {%- endfor %}

        self.GND = MuxPack(Port(name="gnd", ioDirection=IO.OUTPUT, width=1))
        self.VCC = MuxPack(Port(name="vcc", ioDirection=IO.OUTPUT, width=1))

    {# def NewWire(self, srcName: str, dstName: str, width: int) -> tuple[MuxPort, MuxPort]:
        portSrc = MuxPort(Port(_name=srcName, ioDirection=IO.INPUT, width=width, isBus=False))
        setattr(self, srcName, portSrc)
        portDst = MuxPort(Port(_name=dstName, ioDirection=IO.OUTPUT, width=width, isBus=False))
        setattr(self, dstName, portDst)
        return portSrc, portDst #}

    def __getitem__(self, key: str) -> MuxPack:
        return getattr(self, key)

    def __setitem__(self, key: str, value: MuxPack):
        pass
