

  wire $flatten\fsm.$procmux$1065_CMP

  wire $flatten\fsm.$procmux$1066_CMP

  wire $flatten\fsm.$procmux$1074_CMP

  wire $flatten\fsm.$procmux$1075_CMP

  wire $flatten\fsm.$procmux$1081_CMP

  wire $flatten\fsm.$procmux$1082_CMP

  wire $flatten\fsm.$procmux$1103_CMP

  wire $flatten\fsm.$procmux$455_CMP

  wire $flatten\fsm.$procmux$617_CMP

  wire $flatten\fsm.$procmux$666_CMP

  wire $flatten\fsm.$procmux$667_CMP

  wire $flatten\fsm.$procmux$668_CMP

  wire $flatten\fsm.$procmux$671_CMP

  wire $flatten\fsm.$procmux$672_CMP

  wire $flatten\fsm.$procmux$673_CMP

  wire $flatten\fsm.$procmux$679_CMP

  wire $flatten\fsm.$procmux$680_CMP

  wire $flatten\fsm.$procmux$681_CMP

  wire width 32 output 25 \arg_mem_0_addr0

  wire output 26 \arg_mem_0_content_en

  wire input 30 \arg_mem_0_done

  wire width 32 input 29 \arg_mem_0_read_data

  wire width 32 output 28 \arg_mem_0_write_data

  wire output 27 \arg_mem_0_write_en

  wire width 32 output 19 \arg_mem_1_addr0

  wire output 20 \arg_mem_1_content_en

  wire input 24 \arg_mem_1_done

  wire width 32 input 23 \arg_mem_1_read_data

  wire width 32 output 22 \arg_mem_1_write_data

  wire output 21 \arg_mem_1_write_en

  wire width 32 output 13 \arg_mem_2_addr0

  wire output 14 \arg_mem_2_content_en

  wire input 18 \arg_mem_2_done

  wire width 32 input 17 \arg_mem_2_read_data

  wire width 32 output 16 \arg_mem_2_write_data

  wire output 15 \arg_mem_2_write_en

  wire width 32 output 7 \arg_mem_3_addr0

  wire output 8 \arg_mem_3_content_en

  wire input 12 \arg_mem_3_done

  wire width 32 input 11 \arg_mem_3_read_data

  wire width 32 output 10 \arg_mem_3_write_data

  wire output 9 \arg_mem_3_write_en

  attribute \unused_bits "0"
  wire \comb_reg0_done

  wire \comb_reg0_in

  wire \comb_reg0_out

  wire \comb_reg0_write_en

  attribute \unused_bits "0"
  wire \comb_reg1_done

  wire \comb_reg1_in

  wire \comb_reg1_out

  wire \comb_reg1_write_en

  attribute \unused_bits "0"
  wire \comb_reg_done

  wire \comb_reg_in

  wire \comb_reg_out

  wire \comb_reg_write_en

  wire output 6 \done

  attribute \hdlname "fsm load_0_reg_done"
  wire \fsm.load_0_reg_done

  attribute \hdlname "fsm load_0_reg_write_en"
  wire \fsm.load_0_reg_write_en

  attribute \hdlname "fsm muli_0_reg_write_en"
  wire \fsm.muli_0_reg_write_en

  attribute \hdlname "fsm muli_1_reg_write_en"
  wire \fsm.muli_1_reg_write_en

  attribute \hdlname "fsm muli_3_reg_write_en"
  wire \fsm.muli_3_reg_write_en

  attribute \hdlname "fsm std_add_0_left"
  wire \fsm.std_add_0_left

  attribute \hdlname "fsm std_add_0_right"
  wire \fsm.std_add_0_right

  attribute \hdlname "fsm std_add_1_left"
  wire \fsm.std_add_1_left

  attribute \hdlname "fsm std_add_1_right"
  wire \fsm.std_add_1_right

  attribute \hdlname "fsm std_add_3_left"
  wire \fsm.std_add_3_left

  attribute \hdlname "fsm std_add_3_right"
  wire \fsm.std_add_3_right

  attribute \hdlname "fsm std_mult_pipe_0_go"
  wire \fsm.std_mult_pipe_0_go

  attribute \hdlname "fsm std_mult_pipe_1_go"
  wire \fsm.std_mult_pipe_1_go

  attribute \hdlname "fsm std_mult_pipe_3_go"
  wire \fsm.std_mult_pipe_3_go

  attribute \hdlname "fsm std_slt_0_left"
  wire \fsm.std_slt_0_left

  attribute \hdlname "fsm std_slt_1_left"
  wire \fsm.std_slt_1_left

  attribute \hdlname "fsm std_slt_2_left"
  wire \fsm.std_slt_2_left

  attribute \hdlname "fsm while_0_arg0_reg_done"
  wire \fsm.while_0_arg0_reg_done

  attribute \hdlname "fsm while_0_arg0_reg_in"
  wire \fsm.while_0_arg0_reg_in

  attribute \hdlname "fsm while_0_arg0_reg_write_en"
  wire \fsm.while_0_arg0_reg_write_en

  attribute \hdlname "fsm while_1_arg0_reg_done"
  wire \fsm.while_1_arg0_reg_done

  attribute \hdlname "fsm while_1_arg0_reg_in"
  wire \fsm.while_1_arg0_reg_in

  attribute \hdlname "fsm while_1_arg0_reg_write_en"
  wire \fsm.while_1_arg0_reg_write_en

  attribute \hdlname "fsm while_2_arg0_reg_done"
  wire \fsm.while_2_arg0_reg_done

  attribute \hdlname "fsm while_2_arg0_reg_in"
  wire \fsm.while_2_arg0_reg_in

  attribute \hdlname "fsm while_2_arg0_reg_write_en"
  wire \fsm.while_2_arg0_reg_write_en

  wire input 5 \go

  wire width 32 input 1 \in0

  wire width 32 input 2 \in1

  wire width 32 \load_0_reg_out

  attribute \unused_bits "0"
  wire \muli_0_reg_done

  wire width 32 \muli_0_reg_in

  wire width 32 \muli_0_reg_out

  attribute \unused_bits "0"
  wire \muli_1_reg_done

  wire width 32 \muli_1_reg_in

  wire width 32 \muli_1_reg_out

  attribute \unused_bits "0"
  wire \muli_2_reg_done

  wire width 32 \muli_2_reg_in

  wire width 32 \muli_2_reg_out

  attribute \unused_bits "0"
  wire \muli_3_reg_done

  wire width 32 \muli_3_reg_in

  wire width 32 \muli_3_reg_out

  attribute \unused_bits "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
  wire width 32 \std_add_0_out

  attribute \unused_bits "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
  wire width 32 \std_add_1_out

  wire width 32 \std_add_2_right

  attribute \unused_bits "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
  wire width 32 \std_add_3_out

  wire width 32 \std_add_4_right

  attribute \unused_bits "0"
  wire \std_mult_pipe_0_done

  wire width 32 \std_mult_pipe_0_left

  attribute \unused_bits "0"
  wire \std_mult_pipe_1_done

  attribute \unused_bits "0"
  wire \std_mult_pipe_2_done

  attribute \unused_bits "0"
  wire \std_mult_pipe_3_done

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1242
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { \arg_mem_3_write_en $flatten\fsm.$procmux$1103_CMP }
    connect \Y \arg_mem_3_content_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1246
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { \fsm.std_add_0_right $flatten\fsm.$procmux$617_CMP }
    connect \Y \fsm.while_2_arg0_reg_write_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1248
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { \fsm.std_add_1_right $flatten\fsm.$procmux$681_CMP }
    connect \Y \fsm.while_1_arg0_reg_write_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1252
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { \fsm.std_add_3_right $flatten\fsm.$procmux$455_CMP }
    connect \Y \fsm.while_0_arg0_reg_write_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1260
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$666_CMP $flatten\fsm.$procmux$667_CMP $flatten\fsm.$procmux$668_CMP }
    connect \Y \fsm.std_mult_pipe_3_go
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1264
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$671_CMP $flatten\fsm.$procmux$672_CMP $flatten\fsm.$procmux$673_CMP }
    connect \Y \fsm.std_mult_pipe_1_go
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1266
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$679_CMP $flatten\fsm.$procmux$680_CMP $flatten\fsm.$procmux$681_CMP }
    connect \Y \fsm.std_mult_pipe_0_go
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1270
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$1065_CMP $flatten\fsm.$procmux$1066_CMP }
    connect \Y \comb_reg_write_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1272
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$1081_CMP $flatten\fsm.$procmux$1082_CMP }
    connect \Y \comb_reg0_write_en
  end

  cell $reduce_or $auto$opt_reduce.cc:131:opt_pmux$1274
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A { $flatten\fsm.$procmux$1074_CMP $flatten\fsm.$procmux$1075_CMP }
    connect \Y \comb_reg1_write_en
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$694
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_0_out [0]
    connect \S \fsm.std_add_0_right
    connect \Y \fsm.while_2_arg0_reg_in
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$709
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_1_out [0]
    connect \S \fsm.std_add_1_right
    connect \Y \fsm.while_1_arg0_reg_in
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$728
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_3_out [0]
    connect \S \fsm.std_add_3_right
    connect \Y \fsm.while_0_arg0_reg_in
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$767
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_4_right [0]
    connect \S \comb_reg1_write_en
    connect \Y \fsm.std_slt_2_left
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$805
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_2_right [0]
    connect \S \comb_reg0_write_en
    connect \Y \fsm.std_slt_1_left
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$841
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_mult_pipe_0_left [0]
    connect \S \comb_reg_write_en
    connect \Y \fsm.std_slt_0_left
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$947
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_4_right [0]
    connect \S \fsm.std_add_3_right
    connect \Y \fsm.std_add_3_left
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$961
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_add_2_right [0]
    connect \S \fsm.std_add_1_right
    connect \Y \fsm.std_add_1_left
  end

  attribute \full_case 1
  cell $mux $flatten\fsm.$procmux$971
    parameter \WIDTH 1
    connect \A 1'0
    connect \B \std_mult_pipe_0_left [0]
    connect \S \fsm.std_add_0_right
    connect \Y \fsm.std_add_0_left
  end

  attribute \fsm_encoding "auto"
  attribute \hdlname "fsm current_state"
  cell $fsm $fsm$\fsm.current_state$1276
    parameter \ARST_POLARITY 1'1
    parameter \CLK_POLARITY 1'1
    parameter \CTRL_IN_WIDTH 14
    parameter \CTRL_OUT_WIDTH 29
    parameter \NAME "\\fsm.current_state"
    parameter \STATE_BITS 30
    parameter \STATE_NUM 30
    parameter \STATE_NUM_LOG2 5
    parameter \STATE_RST 0
    parameter
    parameter \TRANS_NUM 76
    parameter \TRANS_TABLE 4028'11101--------0--0--111010000000000000000000000010000011101--------1--0--000010000000000000000000000010000011101-----------1--000000000000000000000000000010000011100----------00--111000000000000000000000000000010011100----------10--000110000000000000000000000000010011100-----------1--0000000000000000000000000000000100110110----0-----0--1101000000000000000000000100000000110110----1-----0--000100000000000000000000010000000011011-----------1--000000000000000000000000010000000011010--0--------0--110100000000000000000000000001000011010--1--------0--001110000000000000000000000001000011010-----------1--000000000000000000000000000001000011001-----------0--001100000001000000000000000000000011001-----------1--000000000001000000000000000000000011000-----------0--001011000000000000000000000000000011000-----------1--000001000000000000000000000000000010111-----------0--001000000000001000000000000000000010111-----------1--000000000000001000000000000000000010110--------------000000000000000010000000000000000010101-----------0--011100000100000000000000000000000010101-----------1--000000000100000000000000000000000010100---0-------0--101000000000000000100000000000000010100---1-------0--011010000000000000100000000000000010100-----------1--000000000000000000100000000000000010011-----------0--011000000000100000000000000000000010011-----------1--000000000000100000000000000000000010010-----------0-0100100000000000000000000000000100010010-----------0-1010110000000000000000000000000100010010-----------1--000000000000000000000000000000100010001----0------0--100100000000000000000000100000000010001----1------0--010100000000000000000000100000000010001-----------1--000000000000000000000000100000000010000-----------0--010010010000000000000000000000000010000-----------1--000000010000000000000000000000000001111--0--------0--011110000000000000000000000000000101111--1--------0--010000000000000000000000000000000101111-----------1--000000000000000000000000000000000101110-----------0--111010000000000100000000000000000001110-----------1--000000000000000100000000000000000001101-------1---0--111000000000000000000010000000000001101-------0---0--011010000000000000000010000000000001101-----------1--000000000000000000000010000000000001100-----------0--110110000000000001000000000000000001100-----------1--0000000000000000010000000000000000010110----0-----0--1101000000000000000001000000000000010110----1-----0--000100000000000000000100000000000001011-----------1--000000000000000000000100000000000001010---------1-0--110010000000000000000000001000000001010---------0-0--010100000000000000000000001000000001010-----------1--000000000000000000000000001000000001001-----------0--110000100000000000000000000000000001001-----------1--00000010000000000000000000000000000100000----1----0--10111000000000000000100000000000000100000----0----0--101100000000000000001000000000000001000-----------1--00000000000000000000100000000000000011100----1----0--10111000000000000001000000000000000011100----0----0--101100000000000000010000000000000000111-----------1--000000000000000000010000000000000000110-----------0--101010000010000000000000000000000000110-----------1--000000000010000000000000000000000000101-------1---0--101000000000000000000000000100000000101-------0---0--001010000000000000000000000100000000101-----------1--000000000000000000000000000100000000100-----------0--100110000000010000000000000000000000100-----------1--000000000000010000000000000000000000011----0------0--100100000000000000000001000000000000011----1------0--010100000000000000000001000000000000011-----------1--000000000000000000000001000000000000010----------10--100010000000000000000000000000001000010----------00--000100000000000000000000000000001000010-----------1--000000000000000000000000000000001000001-----------0--100000001000000000000000000000000000001-----------1--000000001000000000000000000000000000000-----------01-011110000000000000000000000000000000000-----------1--000000000000000000000000000000000000000-----------00-0000000000000000000000000000000000
    connect \ARST 1'0
    connect \CLK \clk
    connect \CTRL_IN { \comb_reg1_write_en \comb_reg0_write_en \fsm.while_2_arg0_reg_done \fsm.load_0_reg_done \comb_reg1_out \comb_reg0_out \comb_reg_out \arg_mem_3_done \arg_mem_1_done \arg_mem_0_done \fsm.while_0_arg0_reg_done \reset \go \fsm.while_1_arg0_reg_done }
    connect \CTRL_OUT { \fsm.muli_3_reg_write_en $flatten\fsm.$procmux$666_CMP $flatten\fsm.$procmux$667_CMP $flatten\fsm.$procmux$668_CMP $flatten\fsm.$procmux$671_CMP $flatten\fsm.$procmux$672_CMP $flatten\fsm.$procmux$673_CMP $flatten\fsm.$procmux$679_CMP $flatten\fsm.$procmux$680_CMP $flatten\fsm.$procmux$681_CMP \fsm.muli_1_reg_write_en \done \fsm.muli_0_reg_write_en \fsm.load_0_reg_write_en $flatten\fsm.$procmux$1065_CMP $flatten\fsm.$procmux$1066_CMP $flatten\fsm.$procmux$1081_CMP \arg_mem_3_write_en $flatten\fsm.$procmux$1074_CMP $flatten\fsm.$procmux$1075_CMP $flatten\fsm.$procmux$1082_CMP \arg_mem_0_content_en $flatten\fsm.$procmux$1103_CMP \arg_mem_1_content_en \fsm.std_add_0_right \fsm.std_add_1_right \fsm.std_add_3_right $flatten\fsm.$procmux$455_CMP $flatten\fsm.$procmux$617_CMP }
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000000001 \comb_reg
    connect \clk \clk
    connect \done \comb_reg_done
    connect \in \comb_reg_in
    connect \out \comb_reg_out
    connect \reset \reset
    connect \write_en \comb_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000000001 \comb_reg0
    connect \clk \clk
    connect \done \comb_reg0_done
    connect \in \comb_reg0_in
    connect \out \comb_reg0_out
    connect \reset \reset
    connect \write_en \comb_reg0_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000000001 \comb_reg1
    connect \clk \clk
    connect \done \comb_reg1_done
    connect \in \comb_reg1_in
    connect \out \comb_reg1_out
    connect \reset \reset
    connect \write_en \comb_reg1_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \load_0_reg
    connect \clk \clk
    connect \done \fsm.load_0_reg_done
    connect \in \arg_mem_3_read_data
    connect \out \load_0_reg_out
    connect \reset \reset
    connect \write_en \fsm.load_0_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \muli_0_reg
    connect \clk \clk
    connect \done \muli_0_reg_done
    connect \in \muli_0_reg_in
    connect \out \muli_0_reg_out
    connect \reset \reset
    connect \write_en \fsm.muli_0_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \muli_1_reg
    connect \clk \clk
    connect \done \muli_1_reg_done
    connect \in \muli_1_reg_in
    connect \out \muli_1_reg_out
    connect \reset \reset
    connect \write_en \fsm.muli_1_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \muli_2_reg
    connect \clk \clk
    connect \done \muli_2_reg_done
    connect \in \muli_2_reg_in
    connect \out \muli_2_reg_out
    connect \reset \reset
    connect \write_en \fsm.muli_1_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \muli_3_reg
    connect \clk \clk
    connect \done \muli_3_reg_done
    connect \in \muli_3_reg_in
    connect \out \muli_3_reg_out
    connect \reset \reset
    connect \write_en \fsm.muli_3_reg_write_en
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_0
    connect \left { 31'0000000000000000000000000000000 \fsm.std_add_0_left }
    connect \out \std_add_0_out
    connect \right { 31'0000000000000000000000000000000 \fsm.std_add_0_right }
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_1
    connect \left { 31'0000000000000000000000000000000 \fsm.std_add_1_left }
    connect \out \std_add_1_out
    connect \right { 31'0000000000000000000000000000000 \fsm.std_add_1_right }
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_2
    connect \left \muli_0_reg_out
    connect \out \arg_mem_3_addr0
    connect \right \std_add_2_right
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_3
    connect \left { 31'0000000000000000000000000000000 \fsm.std_add_3_left }
    connect \out \std_add_3_out
    connect \right { 31'0000000000000000000000000000000 \fsm.std_add_3_right }
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_4
    connect \left \muli_0_reg_out
    connect \out \arg_mem_0_addr0
    connect \right \std_add_4_right
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_5
    connect \left \muli_2_reg_out
    connect \out \arg_mem_1_addr0
    connect \right \std_add_2_right
  end

  cell $paramod\std_add\WIDTH=s32'00000000000000000000000000100000 \std_add_6
    connect \left \load_0_reg_out
    connect \out \arg_mem_3_write_data
    connect \right \muli_3_reg_out
  end

  cell $paramod\std_mult_pipe\WIDTH=s32'00000000000000000000000000100000 \std_mult_pipe_0
    connect \clk \clk
    connect \done \std_mult_pipe_0_done
    connect \go \fsm.std_mult_pipe_0_go
    connect \left \std_mult_pipe_0_left
    connect \out \muli_0_reg_in
    connect \reset \reset
    connect \right 30
  end

  cell $paramod\std_mult_pipe\WIDTH=s32'00000000000000000000000000100000 \std_mult_pipe_1
    connect \clk \clk
    connect \done \std_mult_pipe_1_done
    connect \go \fsm.std_mult_pipe_1_go
    connect \left \in0
    connect \out \muli_1_reg_in
    connect \reset \reset
    connect \right \arg_mem_0_read_data
  end

  cell $paramod\std_mult_pipe\WIDTH=s32'00000000000000000000000000100000 \std_mult_pipe_2
    connect \clk \clk
    connect \done \std_mult_pipe_2_done
    connect \go \fsm.std_mult_pipe_1_go
    connect \left \std_add_4_right
    connect \out \muli_2_reg_in
    connect \reset \reset
    connect \right 30
  end

  cell $paramod\std_mult_pipe\WIDTH=s32'00000000000000000000000000100000 \std_mult_pipe_3
    connect \clk \clk
    connect \done \std_mult_pipe_3_done
    connect \go \fsm.std_mult_pipe_3_go
    connect \left \muli_1_reg_out
    connect \out \muli_3_reg_in
    connect \reset \reset
    connect \right \arg_mem_1_read_data
  end

  cell $paramod\std_slt\WIDTH=s32'00000000000000000000000000100000 \std_slt_0
    connect \left { 31'0000000000000000000000000000000 \fsm.std_slt_0_left }
    connect \out \comb_reg_in
    connect \right 0
  end

  cell $paramod\std_slt\WIDTH=s32'00000000000000000000000000100000 \std_slt_1
    connect \left { 31'0000000000000000000000000000000 \fsm.std_slt_1_left }
    connect \out \comb_reg0_in
    connect \right 0
  end

  cell $paramod\std_slt\WIDTH=s32'00000000000000000000000000100000 \std_slt_2
    connect \left { 31'0000000000000000000000000000000 \fsm.std_slt_2_left }
    connect \out \comb_reg1_in
    connect \right 0
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \while_0_arg0_reg
    connect \clk \clk
    connect \done \fsm.while_0_arg0_reg_done
    connect \in { 31'0000000000000000000000000000000 \fsm.while_0_arg0_reg_in }
    connect \out \std_add_4_right
    connect \reset \reset
    connect \write_en \fsm.while_0_arg0_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \while_1_arg0_reg
    connect \clk \clk
    connect \done \fsm.while_1_arg0_reg_done
    connect \in { 31'0000000000000000000000000000000 \fsm.while_1_arg0_reg_in }
    connect \out \std_add_2_right
    connect \reset \reset
    connect \write_en \fsm.while_1_arg0_reg_write_en
  end

  cell $paramod\std_reg\WIDTH=s32'00000000000000000000000000100000 \while_2_arg0_reg
    connect \clk \clk
    connect \done \fsm.while_2_arg0_reg_done
    connect \in { 31'0000000000000000000000000000000 \fsm.while_2_arg0_reg_in }
    connect \out \std_mult_pipe_0_left
    connect \reset \reset
    connect \write_en \fsm.while_2_arg0_reg_write_en
  end

  connect \arg_mem_0_write_data 32'x
  connect \arg_mem_0_write_en 1'0
  connect \arg_mem_1_write_data 32'x
  connect \arg_mem_1_write_en 1'0
  connect \arg_mem_2_addr0 32'x
  connect \arg_mem_2_content_en 1'x
  connect \arg_mem_2_write_data 32'x
  connect \arg_mem_2_write_en 1'x
