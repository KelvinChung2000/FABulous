import "primitives/memories/seq.futil";
import "primitives/core.futil";
import "primitives/compile.futil";
import "primitives/binary_operators.futil";
component main<"toplevel"=1,>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external(1) mem_3 = seq_mem_d1(32, 900, 10);
    @external(1) mem_2 = seq_mem_d1(32, 900, 10);
    @external(1) mem_1 = seq_mem_d1(32, 900, 10);
    @external(1) mem_0 = seq_mem_d1(32, 900, 10);
    gemm_instance = gemm();
  }
  wires {
  }
  control {
    seq {
      seq {
        invoke gemm_instance[arg_mem_0 = mem_0, arg_mem_1 = mem_1, arg_mem_2 = mem_2, arg_mem_3 = mem_3](in0 = in0, in1 = in1)();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_3 = std_slice(32, 10);
    std_slice_2 = std_slice(32, 10);
    std_slice_1 = std_slice(32, 10);
    std_slice_0 = std_slice(32, 10);
    std_add_6 = std_add(32);
    std_add_5 = std_add(32);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    load_0_reg = std_reg(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_2 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    std_add_1 = std_add(32);
    std_add_0 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    for_2_induction_var_reg = std_reg(32);
    for_1_induction_var_reg = std_reg(32);
    for_0_induction_var_reg = std_reg(32);
    ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group init_for_0_induction_var {
      for_0_induction_var_reg.in = 32'd0;
      for_0_induction_var_reg.write_en = 1'd1;
      init_for_0_induction_var[done] = for_0_induction_var_reg.done;
    }
    group init_for_1_induction_var {
      for_1_induction_var_reg.in = 32'd0;
      for_1_induction_var_reg.write_en = 1'd1;
      init_for_1_induction_var[done] = for_1_induction_var_reg.done;
    }
    group init_for_2_induction_var {
      for_2_induction_var_reg.in = 32'd0;
      for_2_induction_var_reg.write_en = 1'd1;
      init_for_2_induction_var[done] = for_2_induction_var_reg.done;
    }
    group bb0_0 {
      std_mult_pipe_0.left = for_2_induction_var_reg.out;
      std_mult_pipe_0.right = 32'd30;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_3 {
      std_slice_3.in = std_add_1.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_1.left = muli_0_reg.out;
      std_add_1.right = for_0_induction_var_reg.out;
      bb0_3[done] = arg_mem_0.done;
    }
    group bb0_4 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_4[done] = muli_1_reg.done;
    }
    group bb0_5 {
      std_mult_pipe_2.left = for_0_induction_var_reg.out;
      std_mult_pipe_2.right = 32'd30;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_5[done] = muli_2_reg.done;
    }
    group bb0_7 {
      std_slice_2.in = std_add_2.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_2.left = muli_2_reg.out;
      std_add_2.right = for_1_induction_var_reg.out;
      bb0_7[done] = arg_mem_1.done;
    }
    group bb0_8 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_8[done] = muli_3_reg.done;
    }
    group bb0_9 {
      std_slice_1.in = std_add_0.out;
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = arg_mem_3.done;
      std_add_0.left = muli_0_reg.out;
      std_add_0.right = for_1_induction_var_reg.out;
      bb0_9[done] = load_0_reg.done;
    }
    group bb0_11 {
      std_slice_0.in = std_add_0.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_3.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_0.left = muli_0_reg.out;
      std_add_0.right = for_1_induction_var_reg.out;
      std_add_3.left = load_0_reg.out;
      std_add_3.right = muli_3_reg.out;
      bb0_11[done] = arg_mem_3.done;
    }
    group incr_for_0_induction_var {
      std_add_4.left = for_0_induction_var_reg.out;
      std_add_4.right = 32'd1;
      for_0_induction_var_reg.in = std_add_4.out;
      for_0_induction_var_reg.write_en = 1'd1;
      incr_for_0_induction_var[done] = for_0_induction_var_reg.done;
    }
    group incr_for_1_induction_var {
      std_add_5.left = for_1_induction_var_reg.out;
      std_add_5.right = 32'd1;
      for_1_induction_var_reg.in = std_add_5.out;
      for_1_induction_var_reg.write_en = 1'd1;
      incr_for_1_induction_var[done] = for_1_induction_var_reg.done;
    }
    group incr_for_2_induction_var {
      std_add_6.left = for_2_induction_var_reg.out;
      std_add_6.right = 32'd1;
      for_2_induction_var_reg.in = std_add_6.out;
      for_2_induction_var_reg.write_en = 1'd1;
      incr_for_2_induction_var[done] = for_2_induction_var_reg.done;
    }
  }
  control {
    seq {
      par {
        init_for_2_induction_var;
      }
      repeat 20 {
        seq {
          seq {
            bb0_0;
            par {
              init_for_1_induction_var;
            }
            repeat 20 {
              seq {
                par {
                  init_for_0_induction_var;
                }
                repeat 20 {
                  seq {
                    seq {
                      bb0_3;
                      bb0_4;
                      bb0_5;
                      bb0_7;
                      bb0_8;
                      bb0_9;
                      bb0_11;
                    }
                    incr_for_0_induction_var;
                  }
                }
                incr_for_1_induction_var;
              }
            }
          }
          incr_for_2_induction_var;
        }
      }
    }
  }
}
