Current pass: well-formed
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_1 = seq_mem_d1(32, 8192, 13);
    @external mem_0 = seq_mem_d1(32, 9, 4);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    std_slt_3 = std_slt(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_3_arg0_reg = std_reg(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg1_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.in = 32'd0;
      while_3_arg0_reg.write_en = 1'd1;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.right = 32'd64;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_2.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_1_arg0_reg.out;
      std_add_2.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.content_en = 1'd1;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_1.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_2_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      while_3_arg0_reg.in = std_add_0.out;
      while_3_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_3_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_3_arg0_reg.out;
      std_slt_0.right = 32'd126;
    }
    comb group bb0_3 {
      std_slt_1.left = while_2_arg0_reg.out;
      std_slt_1.right = 32'd62;
    }
    comb group bb0_5 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd3;
    }
    comb group bb0_7 {
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    std_slice_1 = std_slice(32, 4);
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_2 = std_add(32);
    std_add_1 = std_add(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    ret_arg0_reg = std_reg(32);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.right = 32'd3;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_0.left = in0;
      std_add_0.right = muli_0_reg.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.right = 32'd64;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.right = 32'd64;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_3.left = std_add_2.out;
      std_add_2.left = std_add_1.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      std_add_2.right = in5;
      std_add_3.right = muli_2_reg.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      ret_arg0_reg.in = std_add_4.out;
      ret_arg0_reg.write_en = 1'd1;
      std_add_4.left = in1;
      std_add_4.right = muli_3_reg.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: canonicalize
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_1 = seq_mem_d1(32, 8192, 13);
    @external mem_0 = seq_mem_d1(32, 9, 4);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    std_slt_3 = std_slt(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_3_arg0_reg = std_reg(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg1_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    std_slice_1 = std_slice(32, 4);
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_2 = std_add(32);
    std_add_1 = std_add(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    ret_arg0_reg = std_reg(32);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      bb0_0;
      bb0_2;
      bb0_3;
      bb0_6;
      bb0_8;
      bb0_9;
      ret_assign_0;
    }
  }
}
Current pass: compile-sync-without-sync-reg
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      bb0_0;
      bb0_2;
      bb0_3;
      bb0_6;
      bb0_8;
      bb0_9;
      ret_assign_0;
    }
  }
}
Current pass: group2seq
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        beg_spl_bb0_0;
        end_spl_bb0_0;
      }
      bb0_2;
      seq {
        beg_spl_bb0_3;
        end_spl_bb0_3;
      }
      seq {
        beg_spl_bb0_6;
        end_spl_bb0_6;
      }
      bb0_8;
      seq {
        beg_spl_bb0_9;
        end_spl_bb0_9;
      }
      ret_assign_0;
    }
  }
}
Current pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        beg_spl_bb0_0;
        end_spl_bb0_0;
      }
      bb0_2;
      seq {
        beg_spl_bb0_3;
        end_spl_bb0_3;
      }
      seq {
        beg_spl_bb0_6;
        end_spl_bb0_6;
      }
      bb0_8;
      seq {
        beg_spl_bb0_9;
        end_spl_bb0_9;
      }
      ret_assign_0;
    }
  }
}
Current pass: group2invoke
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_2_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: infer-share
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_2.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: inline
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_2.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_2.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: constant-port-prop
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_2.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_2.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: cell-share
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    @NODE_ID(0) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_3.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_2_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_3.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) par {
                @NODE_ID(11) invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(12) invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              @NODE_ID(13) while std_slt_3.out with bb0_5 {
                @NODE_ID(14) seq {
                  @NODE_ID(15) par {
                    @NODE_ID(16) invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    @NODE_ID(17) invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  @NODE_ID(18) while std_slt_3.out with bb0_7 {
                    @NODE_ID(19) seq {
                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      @NODE_ID(21) assign_while_0_latch;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke while_2_arg0_reg(
                in = std_add_4.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(25) invoke while_3_arg0_reg(
            in = std_add_4.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_3(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_3(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_3(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_3.out
      )() with comb_invoke;
    }
  }
}
Current pass: simplify-with-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    @NODE_ID(0) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_4.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      comb_reg4.in = std_add_4.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_3_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) seq {
                @NODE_ID(5) invoke std_mult_pipe_0(
                  right = 32'd64,
                  left = while_3_arg0_reg.out
                )();
                @NODE_ID(6) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(7) invoke while_2_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) par {
                        @NODE_ID(11) invoke while_1_arg0_reg(
                          in = 32'd0
                        )();
                        @NODE_ID(12) invoke while_1_arg1_reg(
                          in = 32'd0
                        )();
                      }
                      seq {
                        bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            @NODE_ID(14) seq {
                              @NODE_ID(15) par {
                                @NODE_ID(16) invoke while_0_arg0_reg(
                                  in = 32'd0
                                )();
                                @NODE_ID(17) invoke while_0_arg1_reg(
                                  in = while_1_arg1_reg.out
                                )();
                              }
                              seq {
                                bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    @NODE_ID(19) seq {
                                      @NODE_ID(20) invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                                        in5 = while_2_arg0_reg.out,
                                        in6 = while_3_arg0_reg.out,
                                        in0 = while_0_arg0_reg.out,
                                        in1 = while_0_arg1_reg.out,
                                        in3 = while_1_arg0_reg.out
                                      )();
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) invoke while_2_arg0_reg(
                        in = std_add_4.out
                      )() with comb_invoke;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(25) invoke while_3_arg0_reg(
                in = std_add_4.out
              )() with comb_invoke0;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    static<1> group comb_invoke0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      comb_reg.in = std_add_3.out;
      comb_reg.write_en = 1'd1;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke std_mult_pipe_3(
          right = 32'd3,
          left = in3
        )();
        @NODE_ID(3) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke std_mult_pipe_3(
          right = 32'd64,
          left = in3
        )();
        @NODE_ID(7) invoke muli_1_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke std_mult_pipe_3(
          right = 32'd64,
          left = in6
        )();
        @NODE_ID(10) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        @NODE_ID(14) invoke muli_2_reg(
          in = std_mult_pipe_3.out
        )();
      }
      @NODE_ID(15) invoke ret_arg0_reg(
        in = std_add_3.out
      )() with comb_invoke;
    }
  }
}
Current pass: compile-invoke
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0 {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1 {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2 {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5 {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7 {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10 {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_4.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      comb_reg4.in = std_add_4.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) seq {
                @NODE_ID(5) invoke1;
                @NODE_ID(6) invoke2;
              }
              @NODE_ID(7) invoke3;
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) par {
                        @NODE_ID(11) invoke4;
                        @NODE_ID(12) invoke5;
                      }
                      seq {
                        bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            @NODE_ID(14) seq {
                              @NODE_ID(15) par {
                                @NODE_ID(16) invoke6;
                                @NODE_ID(17) invoke7;
                              }
                              seq {
                                bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    @NODE_ID(19) seq {
                                      @NODE_ID(20) invoke8;
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(25) invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0 {
      std_mult_pipe_3.go = 1'd1;
      invoke0[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    group invoke1 {
      muli_2_reg.write_en = 1'd1;
      invoke1[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke2 {
      std_mult_pipe_3.go = 1'd1;
      invoke2[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    group invoke3 {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    group invoke4 {
      std_mult_pipe_3.go = 1'd1;
      invoke4[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    group invoke5 {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke6 {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7 {
      muli_2_reg.write_en = 1'd1;
      invoke7[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke8 {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      comb_reg.in = std_add_3.out;
      comb_reg.write_en = 1'd1;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID seq {
        @NODE_ID(2) invoke0;
        @NODE_ID(3) invoke1;
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) seq {
        @NODE_ID(6) invoke2;
        @NODE_ID(7) invoke3;
      }
      @NODE_ID(8) seq {
        @NODE_ID(9) invoke4;
        @NODE_ID(10) invoke5;
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) seq {
        @NODE_ID(13) invoke6;
        @NODE_ID(14) invoke7;
      }
      @NODE_ID(15) invoke8;
    }
  }
}
Current pass: static-inference
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_4.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      comb_reg4.in = std_add_4.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID @promotable invoke0;
      seq {
        @promotable bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) @promotable(4) seq {
                @NODE_ID(5) @promotable(3) invoke1;
                @NODE_ID(6) @promotable invoke2;
              }
              @NODE_ID(7) @promotable invoke3;
              seq {
                @promotable bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) @promotable par {
                        @NODE_ID(11) @promotable invoke4;
                        @NODE_ID(12) @promotable invoke5;
                      }
                      seq {
                        @promotable bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            @NODE_ID(14) seq {
                              @NODE_ID(15) @promotable par {
                                @NODE_ID(16) @promotable invoke6;
                                @NODE_ID(17) @promotable invoke7;
                              }
                              seq {
                                @promotable bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    @NODE_ID(19) seq {
                                      @NODE_ID(20) invoke8;
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    @promotable bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            @promotable bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) @promotable invoke9;
                    }
                    @promotable bb0_30;
                  }
                }
              }
              @NODE_ID(25) @promotable invoke10;
            }
            @promotable bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke0[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke1[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke2[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke4[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke7[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      comb_reg.in = std_add_3.out;
      comb_reg.write_en = 1'd1;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID @promotable(4) seq {
        @NODE_ID(2) @promotable(3) invoke0;
        @NODE_ID(3) @promotable invoke1;
      }
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) @promotable(4) seq {
        @NODE_ID(6) @promotable(3) invoke2;
        @NODE_ID(7) @promotable invoke3;
      }
      @NODE_ID(8) @promotable(4) seq {
        @NODE_ID(9) @promotable(3) invoke4;
        @NODE_ID(10) @promotable invoke5;
      }
      @NODE_ID(11) bb0_8;
      @NODE_ID(12) @promotable(4) seq {
        @NODE_ID(13) @promotable(3) invoke6;
        @NODE_ID(14) @promotable invoke7;
      }
      @NODE_ID(15) @promotable invoke8;
    }
  }
}
Current pass: static-promotion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_4.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      comb_reg4.in = std_add_4.out;
      comb_reg4.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    seq {
                      static<1> par {
                        @NODE_ID(11) invoke40;
                        @NODE_ID(12) invoke50;
                      }
                      seq {
                        bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            seq {
                              static<1> par {
                                @NODE_ID(16) invoke60;
                                @NODE_ID(17) invoke70;
                              }
                              seq {
                                bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    seq {
                                      @NODE_ID(20) invoke8;
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(25) invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke0[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke1[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke2[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke4[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke7[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      comb_reg.in = std_add_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        @NODE_ID(2) invoke00;
        @NODE_ID(3) invoke10;
      }
      @NODE_ID(4) bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(6) invoke20;
          @NODE_ID(7) invoke30;
        }
        @promotable(4) static<4> seq  {
          @NODE_ID(9) invoke40;
          @NODE_ID(10) invoke50;
        }
      }
      @NODE_ID(11) bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(13) invoke60;
          @NODE_ID(14) invoke70;
        }
        @NODE_ID(15) invoke80;
      }
    }
  }
}
Current pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_4.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
      comb_reg4.in = std_add_4.out;
      comb_reg4.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    seq {
                      static<1> par {
                        @NODE_ID(11) invoke40;
                        @NODE_ID(12) invoke50;
                      }
                      seq {
                        bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            seq {
                              static<1> par {
                                @NODE_ID(16) invoke60;
                                @NODE_ID(17) invoke70;
                              }
                              seq {
                                bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    seq {
                                      @NODE_ID(20) invoke8;
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(25) invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_3.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_3.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke0[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke1[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke2[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke4[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke7[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
      comb_reg.in = std_add_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    comb group comb_invoke {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        @NODE_ID(2) invoke00;
        @NODE_ID(3) invoke10;
      }
      @NODE_ID(4) bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(6) invoke20;
          @NODE_ID(7) invoke30;
        }
        @promotable(4) static<4> seq  {
          @NODE_ID(9) invoke40;
          @NODE_ID(10) invoke50;
        }
      }
      @NODE_ID(11) bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(13) invoke60;
          @NODE_ID(14) invoke70;
        }
        @NODE_ID(15) invoke80;
      }
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    seq {
                      static<1> par {
                        @NODE_ID(11) invoke40;
                        @NODE_ID(12) invoke50;
                      }
                      seq {
                        bb0_50;
                        @NODE_ID(13) while comb_reg1.out {
                          seq {
                            seq {
                              static<1> par {
                                @NODE_ID(16) invoke60;
                                @NODE_ID(17) invoke70;
                              }
                              seq {
                                bb0_70;
                                @NODE_ID(18) while comb_reg2.out {
                                  seq {
                                    seq {
                                      @NODE_ID(20) invoke8;
                                      @NODE_ID(21) assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              @NODE_ID(22) assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      @NODE_ID(23) bb0_10;
                      @NODE_ID(24) invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(25) invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        @NODE_ID(2) invoke00;
        @NODE_ID(3) invoke10;
      }
      @NODE_ID(4) bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(6) invoke20;
          @NODE_ID(7) invoke30;
        }
        @promotable(4) static<4> seq  {
          @NODE_ID(9) invoke40;
          @NODE_ID(10) invoke50;
        }
      }
      @NODE_ID(11) bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          @NODE_ID(13) invoke60;
          @NODE_ID(14) invoke70;
        }
        @NODE_ID(15) invoke80;
      }
    }
  }
}
Current pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @promoted static<4> par {
            @promotable(4) static<4> seq  {
              @NODE_ID(5) invoke100;
              @NODE_ID(6) invoke20;
            }
            @NODE_ID(7) invoke30;
          }
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static<1> par {
                @NODE_ID(11) invoke40;
                @NODE_ID(12) invoke50;
              }
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static<1> par {
                    @NODE_ID(16) invoke60;
                    @NODE_ID(17) invoke70;
                  }
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        @NODE_ID(2) invoke00;
        @NODE_ID(3) invoke10;
      }
      @NODE_ID(4) bb0_2;
      static<8> seq  {
        @NODE_ID(6) invoke20;
        @NODE_ID(7) invoke30;
        @NODE_ID(9) invoke40;
        @NODE_ID(10) invoke50;
      }
      @NODE_ID(11) bb0_8;
      static<5> seq  {
        @NODE_ID(13) invoke60;
        @NODE_ID(14) invoke70;
        @NODE_ID(15) invoke80;
      }
    }
  }
}
Current pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_4.right = 32'd1;
      std_add_4.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.right = 32'd1;
      std_add_4.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_3.right = 32'd126;
      std_slt_3.left = while_3_arg0_reg.out;
      comb_reg.in = std_slt_3.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_3.right = 32'd62;
      std_slt_3.left = while_2_arg0_reg.out;
      comb_reg0.in = std_slt_3.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_50 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_1_arg0_reg.out;
      comb_reg1.in = std_slt_3.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_reg2.in = std_slt_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_3.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
      std_mult_pipe_3.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.right = muli_2_reg.out;
      std_add_3.left = in1;
    }
    static<4> group static_seq {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      std_mult_pipe_3.left = %[0:3] ? in3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd64;
      std_mult_pipe_3.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.go = %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[4:7] ? 32'd64;
      std_mult_pipe_3.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_add_3.right = %4 ? muli_2_reg.out;
      std_add_3.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
    }
    static<1> group bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<1> group bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<4> group static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    static<3> group invoke00 {
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd3;
    }
    static<1> group invoke10 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_3.left = in3;
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_3.left = in6;
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = 32'd64;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke70 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_3.out;
      std_add_3.left = in1;
      std_add_3.right = muli_2_reg.out;
    }
    static<4> group static_seq {
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.left = %[4:7] ? in6;
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] | %[4:7] ? 32'd64;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_add_3.left = %4 ? in1;
      std_add_3.right = %4 ? muli_2_reg.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
    }
    static<1> group bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<1> group bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<4> group static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    static<4> group static_seq {
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.left = %[4:7] ? in6;
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] | %[4:7] ? 32'd64;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_add_3.left = %4 ? in1;
      std_add_3.right = %4 ? muli_2_reg.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
    }
    static<1> group bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<1> group bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<4> group static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    static<4> group static_seq {
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.left = %[4:7] ? in6;
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] | %[4:7] ? 32'd64;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_add_3.left = %4 ? in1;
      std_add_3.right = %4 ? muli_2_reg.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
    }
    static<1> group bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<1> group bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<4> group static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    static<4> group static_seq {
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.left = %[4:7] ? in6;
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] | %[4:7] ? 32'd64;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_add_3.left = %4 ? in1;
      std_add_3.right = %4 ? muli_2_reg.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: static-fsm-opts
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
    }
    static<1> group bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<1> group bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
    static<4> group static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
    }
    static<1> group static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              static_par_thread0;
              bb0_50;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  static_par_thread1;
                  bb0_70;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  bb0_50;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              bb0_30;
            }
          }
          @NODE_ID(25) invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    static<4> group static_seq {
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? 32'd3;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_3.left = %[4:7] ? in6;
      std_mult_pipe_3.left = %[0:3] ? in3;
      std_mult_pipe_3.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] | %[4:7] ? 32'd64;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_3.out;
    }
    static<5> group static_seq1 {
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_3.out;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_add_3.left = %4 ? in1;
      std_add_3.right = %4 ? muli_2_reg.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_3.out;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      @NODE_ID(4) bb0_2;
      static_seq0;
      @NODE_ID(11) bb0_8;
      static_seq1;
    }
  }
}
Current pass: compile-static
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_00[done] = ud.out;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_30[done] = ud1.out;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_bb0_50 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_50[done] = ud3.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_70 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_70[done] = ud5.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      @NODE_ID invoke0;
      wrapper_early_reset_bb0_000;
      @NODE_ID(2) while comb_reg.out {
        seq {
          wrapper_early_reset_static_par_thread;
          wrapper_early_reset_bb0_300;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              wrapper_early_reset_static_par_thread0;
              wrapper_early_reset_bb0_500;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  wrapper_early_reset_static_par_thread1;
                  wrapper_early_reset_bb0_700;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      wrapper_early_reset_bb0_700;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  wrapper_early_reset_bb0_500;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              wrapper_early_reset_bb0_300;
            }
          }
          @NODE_ID(25) invoke10;
          wrapper_early_reset_bb0_000;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      wrapper_early_reset_static_seq;
      @NODE_ID(4) bb0_2;
      wrapper_early_reset_static_seq0;
      @NODE_ID(11) bb0_8;
      wrapper_early_reset_static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      @NODE_ID invoke0;
      wrapper_early_reset_bb0_000;
      @NODE_ID(2) while comb_reg.out {
        seq {
          wrapper_early_reset_static_par_thread;
          wrapper_early_reset_bb0_300;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              wrapper_early_reset_static_par_thread0;
              wrapper_early_reset_bb0_500;
              @NODE_ID(13) while comb_reg1.out {
                seq {
                  wrapper_early_reset_static_par_thread1;
                  wrapper_early_reset_bb0_700;
                  @NODE_ID(18) while comb_reg2.out {
                    seq {
                      @NODE_ID(20) invoke8;
                      @NODE_ID(21) assign_while_0_latch;
                      wrapper_early_reset_bb0_700;
                    }
                  }
                  @NODE_ID(22) assign_while_1_latch;
                  wrapper_early_reset_bb0_500;
                }
              }
              @NODE_ID(23) bb0_10;
              @NODE_ID(24) invoke9;
              wrapper_early_reset_bb0_300;
            }
          }
          @NODE_ID(25) invoke10;
          wrapper_early_reset_bb0_000;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      wrapper_early_reset_static_seq;
      @NODE_ID(4) bb0_2;
      wrapper_early_reset_static_seq0;
      @NODE_ID(11) bb0_8;
      wrapper_early_reset_static_seq1;
    }
  }
}
Current pass: tdcc
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: wrap-main
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = while_0_arg0_reg.out;
      std_add_4.right = 32'd1;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      std_add_4.left = while_1_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = while_1_arg1_reg.out;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_4.out;
      std_add_4.left = while_3_arg0_reg.out;
      std_add_4.right = 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = 1'd1;
      comb_reg2.in = std_slt_3.out;
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_3.out;
      std_slt_3.left = while_1_arg0_reg.out;
      std_slt_3.right = 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_3.out;
      std_slt_3.left = while_2_arg0_reg.out;
      std_slt_3.right = 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_3.out;
      std_slt_3.left = while_3_arg0_reg.out;
      std_slt_3.right = 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_1.out;
      arg_mem_0_write_en = 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = in0;
      std_add_3.right = muli_2_reg.out;
      std_slice_1.in = std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_0.out;
      arg_mem_1_content_en = 1'd1;
      std_add_2.left = std_add_1.out;
      std_add_2.right = in5;
      std_add_3.left = std_add_2.out;
      std_add_3.right = muli_2_reg.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 4'd1;
      fsm.in = fsm.out != 4'd3 ? adder.out;
      fsm.write_en = fsm.out != 4'd3 ? 1'd1;
      fsm.in = fsm.out == 4'd3 ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7 ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm.out;
      adder0.right = 4'd1;
      fsm.in = fsm.out != 4'd7 ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 ? 1'd1;
      fsm.in = fsm.out == 4'd7 ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 ? in1;
      std_add_3.right = fsm.out == 4'd4 ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = fsm.out;
      adder1.right = 4'd1;
      fsm.in = fsm.out != 4'd4 ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 ? 1'd1;
      fsm.in = fsm.out == 4'd4 ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: go-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_1.write_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      mem_1.addr0 = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0[go] ? mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0[go] ? mem_0.done;
      stencil_stencil2d_inner_loop_0_instance.in6 = invoke0[go] ? in4;
      stencil_stencil2d_inner_loop_0_instance.in1 = invoke0[go] ? in1;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0[go] ? mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = invoke0[go] ? in2;
      stencil_stencil2d_inner_loop_0_instance.go = invoke0[go] ? 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = invoke0[go] ? in3;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0[go] ? mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.in0 = invoke0[go] ? in0;
      mem_0.write_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      mem_0.addr0 = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = assign_while_0_latch[go] ? 1'd1;
      while_0_arg0_reg.in = assign_while_0_latch[go] ? std_add_4.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_4.left = assign_while_0_latch[go] ? while_0_arg0_reg.out;
      std_add_4.right = assign_while_0_latch[go] ? 32'd1;
      while_0_arg1_reg.write_en = assign_while_0_latch[go] ? 1'd1;
      while_0_arg1_reg.in = assign_while_0_latch[go] ? stencil_stencil2d_inner_loop_0_instance.out0;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.write_en = assign_while_1_latch[go] ? 1'd1;
      while_1_arg0_reg.in = assign_while_1_latch[go] ? std_add_4.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
      while_1_arg1_reg.write_en = assign_while_1_latch[go] ? 1'd1;
      while_1_arg1_reg.in = assign_while_1_latch[go] ? while_0_arg1_reg.out;
      std_add_4.left = assign_while_1_latch[go] ? while_1_arg0_reg.out;
      std_add_4.right = assign_while_1_latch[go] ? 32'd1;
    }
    group bb0_10 {
      arg_mem_1_write_data = bb0_10[go] ? while_1_arg1_reg.out;
      arg_mem_1_write_en = bb0_10[go] ? 1'd1;
      arg_mem_1_addr0 = bb0_10[go] ? std_slice_0.out;
      arg_mem_1_content_en = bb0_10[go] ? 1'd1;
      std_slice_0.in = bb0_10[go] ? std_add_4.out;
      bb0_10[done] = arg_mem_1_done;
      std_add_4.left = bb0_10[go] ? while_2_arg0_reg.out;
      std_add_4.right = bb0_10[go] ? muli_0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = invoke0[go] ? 1'd1;
      while_3_arg0_reg.in = invoke0[go] ? 32'd0;
      invoke0[done] = while_3_arg0_reg.done;
    }
    group invoke8 {
      arg_mem_0_content_en = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_addr0 = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_write_en = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      arg_mem_2_addr0 = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = invoke8[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8[go] ? arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8[go] ? arg_mem_2_done;
      stencil_stencil2d_inner_loop_0_instance.in6 = invoke8[go] ? while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = invoke8[go] ? while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8[go] ? arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.in3 = invoke8[go] ? while_1_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.go = invoke8[go] ? 1'd1;
      stencil_stencil2d_inner_loop_0_instance.in5 = invoke8[go] ? while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8[go] ? arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.in0 = invoke8[go] ? while_0_arg0_reg.out;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = invoke9[go] ? 1'd1;
      while_2_arg0_reg.in = invoke9[go] ? std_add_4.out;
      invoke9[done] = while_2_arg0_reg.done;
      std_add_4.left = invoke9[go] ? while_2_arg0_reg.out;
      std_add_4.right = invoke9[go] ? 32'd1;
    }
    group invoke10<"promotable"=1> {
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.write_en = invoke10[go] ? 1'd1;
      while_3_arg0_reg.in = invoke10[go] ? std_add_4.out;
      std_add_4.left = invoke10[go] ? while_3_arg0_reg.out;
      std_add_4.right = invoke10[go] ? 32'd1;
    }
    group early_reset_static_par_thread<"promoted"=1> {
      muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread[go] ? 1'd1;
      muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread[go] ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = fsm.out == 3'd0 & early_reset_static_par_thread[go] ? 1'd1;
      while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread[go] ? 32'd0;
      std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread[go] ? while_3_arg0_reg.out;
      std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread[go] ? 1'd1;
      std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread[go] ? 32'd64;
      early_reset_static_par_thread[done] = ud0.out;
      adder.left = early_reset_static_par_thread[go] ? fsm.out;
      adder.right = early_reset_static_par_thread[go] ? 3'd1;
      fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread[go] ? adder.out;
      fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread[go] ? 1'd1;
      fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread[go] ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 & early_reset_static_par_thread[go] ? 1'd1;
    }
    group early_reset_static_par_thread0 {
      while_1_arg0_reg.write_en = early_reset_static_par_thread0[go] ? 1'd1;
      while_1_arg0_reg.in = early_reset_static_par_thread0[go] ? 32'd0;
      while_1_arg1_reg.write_en = early_reset_static_par_thread0[go] ? 1'd1;
      while_1_arg1_reg.in = early_reset_static_par_thread0[go] ? 32'd0;
      early_reset_static_par_thread0[done] = ud2.out;
    }
    group early_reset_static_par_thread1 {
      while_0_arg0_reg.write_en = early_reset_static_par_thread1[go] ? 1'd1;
      while_0_arg0_reg.in = early_reset_static_par_thread1[go] ? 32'd0;
      while_0_arg1_reg.write_en = early_reset_static_par_thread1[go] ? 1'd1;
      while_0_arg1_reg.in = early_reset_static_par_thread1[go] ? while_1_arg1_reg.out;
      early_reset_static_par_thread1[done] = ud4.out;
    }
    group early_reset_bb0_700 {
      comb_reg2.write_en = early_reset_bb0_700[go] ? 1'd1;
      comb_reg2.in = early_reset_bb0_700[go] ? std_slt_3.out;
      std_slt_3.left = early_reset_bb0_700[go] ? while_0_arg0_reg.out;
      std_slt_3.right = early_reset_bb0_700[go] ? 32'd3;
      early_reset_bb0_700[done] = ud6.out;
    }
    group early_reset_bb0_500 {
      comb_reg1.write_en = early_reset_bb0_500[go] ? 1'd1;
      comb_reg1.in = early_reset_bb0_500[go] ? std_slt_3.out;
      std_slt_3.left = early_reset_bb0_500[go] ? while_1_arg0_reg.out;
      std_slt_3.right = early_reset_bb0_500[go] ? 32'd3;
      early_reset_bb0_500[done] = ud7.out;
    }
    group early_reset_bb0_300 {
      comb_reg0.write_en = early_reset_bb0_300[go] ? 1'd1;
      comb_reg0.in = early_reset_bb0_300[go] ? std_slt_3.out;
      std_slt_3.left = early_reset_bb0_300[go] ? while_2_arg0_reg.out;
      std_slt_3.right = early_reset_bb0_300[go] ? 32'd62;
      early_reset_bb0_300[done] = ud8.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = early_reset_bb0_000[go] ? 1'd1;
      comb_reg.in = early_reset_bb0_000[go] ? std_slt_3.out;
      std_slt_3.left = early_reset_bb0_000[go] ? while_3_arg0_reg.out;
      std_slt_3.right = early_reset_bb0_000[go] ? 32'd126;
      early_reset_bb0_000[done] = ud9.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = wrapper_early_reset_bb0_000[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000[go] ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread<"promoted"=1> {
      early_reset_static_par_thread[go] = wrapper_early_reset_static_par_thread[go] ? 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread[go] ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread[go] ? 1'd1;
      wrapper_early_reset_static_par_thread[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_300 {
      early_reset_bb0_300[go] = wrapper_early_reset_bb0_300[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300[go] ? 1'd1;
      wrapper_early_reset_bb0_300[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread0 {
      early_reset_static_par_thread0[go] = wrapper_early_reset_static_par_thread0[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0[go] ? 1'd1;
      wrapper_early_reset_static_par_thread0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_500 {
      early_reset_bb0_500[go] = wrapper_early_reset_bb0_500[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500[go] ? 1'd1;
      wrapper_early_reset_bb0_500[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_par_thread1 {
      early_reset_static_par_thread1[go] = wrapper_early_reset_static_par_thread1[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1[go] ? 1'd1;
      wrapper_early_reset_static_par_thread1[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_700 {
      early_reset_bb0_700[go] = wrapper_early_reset_bb0_700[go] ? 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700[go] ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700[go] ? 1'd1;
      wrapper_early_reset_bb0_700[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 & tdcc[go] ? 1'd1;
      wrapper_early_reset_static_par_thread[go] = !wrapper_early_reset_static_par_thread[done] & fsm0.out == 5'd2 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd3 & tdcc[go] ? 1'd1;
      wrapper_early_reset_static_par_thread0[go] = !wrapper_early_reset_static_par_thread0[done] & fsm0.out == 5'd4 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd5 & tdcc[go] ? 1'd1;
      wrapper_early_reset_static_par_thread1[go] = !wrapper_early_reset_static_par_thread1[done] & fsm0.out == 5'd6 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd7 & tdcc[go] ? 1'd1;
      invoke8[go] = !invoke8[done] & fsm0.out == 5'd8 & tdcc[go] ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd9 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_700[go] = !wrapper_early_reset_bb0_700[done] & fsm0.out == 5'd10 & tdcc[go] ? 1'd1;
      assign_while_1_latch[go] = !assign_while_1_latch[done] & fsm0.out == 5'd11 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_500[go] = !wrapper_early_reset_bb0_500[done] & fsm0.out == 5'd12 & tdcc[go] ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd13 & tdcc[go] ? 1'd1;
      invoke9[go] = !invoke9[done] & fsm0.out == 5'd14 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_300[go] = !wrapper_early_reset_bb0_300[done] & fsm0.out == 5'd15 & tdcc[go] ? 1'd1;
      invoke10[go] = !invoke10[done] & fsm0.out == 5'd16 & tdcc[go] ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd17 & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] & tdcc[go] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out & tdcc[go] ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out & tdcc[go] ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & comb_reg.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] & tdcc[go] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out & tdcc[go] ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & comb_reg0.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out & tdcc[go] ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & comb_reg0.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] & tdcc[go] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out & tdcc[go] ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & comb_reg1.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out & tdcc[go] ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & comb_reg1.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] & tdcc[go] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out & tdcc[go] ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & comb_reg2.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out & tdcc[go] ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & comb_reg2.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & invoke8[done] & tdcc[go] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & invoke8[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch[done] & tdcc[go] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out & tdcc[go] ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out & tdcc[go] ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700[done] & !comb_reg2.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch[done] & tdcc[go] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out & tdcc[go] ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out & tdcc[go] ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500[done] & !comb_reg1.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & bb0_10[done] & tdcc[go] ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & bb0_10[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & invoke9[done] & tdcc[go] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & invoke9[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out & tdcc[go] ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out & tdcc[go] ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300[done] & !comb_reg0.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & invoke10[done] & tdcc[go] ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & invoke10[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out & tdcc[go] ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out & tdcc[go] ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000[done] & !comb_reg.out & tdcc[go] ? 1'd1;
      tdcc[done] = fsm0.out == 5'd18 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
  }
  wires {
    group bb0_2 {
      arg_mem_0_content_en = bb0_2[go] ? 1'd1;
      arg_mem_0_addr0 = bb0_2[go] ? std_slice_1.out;
      arg_mem_0_write_en = bb0_2[go] ? 1'd0;
      bb0_2[done] = arg_mem_0_done;
      std_add_3.left = bb0_2[go] ? in0;
      std_add_3.right = bb0_2[go] ? muli_2_reg.out;
      std_slice_1.in = bb0_2[go] ? std_add_3.out;
    }
    group bb0_8 {
      arg_mem_1_write_en = bb0_8[go] ? 1'd0;
      arg_mem_1_addr0 = bb0_8[go] ? std_slice_0.out;
      arg_mem_1_content_en = bb0_8[go] ? 1'd1;
      std_add_2.left = bb0_8[go] ? std_add_1.out;
      std_add_2.right = bb0_8[go] ? in5;
      std_add_3.left = bb0_8[go] ? std_add_2.out;
      std_add_3.right = bb0_8[go] ? muli_2_reg.out;
      std_add_1.left = bb0_8[go] ? muli_1_reg.out;
      std_add_1.right = bb0_8[go] ? in0;
      bb0_8[done] = arg_mem_1_done;
      std_slice_0.in = bb0_8[go] ? std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq[go] ? in3;
      std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq[go] ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq[go] ? 32'd3;
      muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq[go] ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq[go] ? std_mult_pipe_3.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = early_reset_static_seq[go] ? fsm.out;
      adder.right = early_reset_static_seq[go] ? 4'd1;
      fsm.in = fsm.out != 4'd3 & early_reset_static_seq[go] ? adder.out;
      fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq[go] ? 1'd1;
      fsm.in = fsm.out == 4'd3 & early_reset_static_seq[go] ? 4'd0;
      fsm.write_en = fsm.out == 4'd3 & early_reset_static_seq[go] ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0[go] ? in6;
      std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq0[go] ? in3;
      std_mult_pipe_3.go = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0[go] ? 1'd1;
      std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0[go] ? 32'd64;
      muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0[go] ? 1'd1;
      muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0[go] ? std_mult_pipe_3.out;
      muli_2_reg.write_en = fsm.out == 4'd7 & early_reset_static_seq0[go] ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd7 & early_reset_static_seq0[go] ? std_mult_pipe_3.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = early_reset_static_seq0[go] ? fsm.out;
      adder0.right = early_reset_static_seq0[go] ? 4'd1;
      fsm.in = fsm.out != 4'd7 & early_reset_static_seq0[go] ? adder0.out;
      fsm.write_en = fsm.out != 4'd7 & early_reset_static_seq0[go] ? 1'd1;
      fsm.in = fsm.out == 4'd7 & early_reset_static_seq0[go] ? 4'd0;
      fsm.write_en = fsm.out == 4'd7 & early_reset_static_seq0[go] ? 1'd1;
    }
    group early_reset_static_seq1 {
      ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1[go] ? 1'd1;
      ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1[go] ? std_add_3.out;
      std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1[go] ? arg_mem_0_read_data;
      std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq1[go] ? 1'd1;
      std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1[go] ? arg_mem_1_read_data;
      std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1[go] ? in1;
      std_add_3.right = fsm.out == 4'd4 & early_reset_static_seq1[go] ? muli_2_reg.out;
      muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq1[go] ? 1'd1;
      muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq1[go] ? std_mult_pipe_3.out;
      early_reset_static_seq1[done] = ud1.out;
      adder1.left = early_reset_static_seq1[go] ? fsm.out;
      adder1.right = early_reset_static_seq1[go] ? 4'd1;
      fsm.in = fsm.out != 4'd4 & early_reset_static_seq1[go] ? adder1.out;
      fsm.write_en = fsm.out != 4'd4 & early_reset_static_seq1[go] ? 1'd1;
      fsm.in = fsm.out == 4'd4 & early_reset_static_seq1[go] ? 4'd0;
      fsm.write_en = fsm.out == 4'd4 & early_reset_static_seq1[go] ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = wrapper_early_reset_static_seq[go] ? 1'd1;
      signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq[go] ? 1'd1;
      signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq[go] ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = wrapper_early_reset_static_seq0[go] ? 1'd1;
      signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0[go] ? 1'd1;
      signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0[go] ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = wrapper_early_reset_static_seq1[go] ? 1'd1;
      signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1[go] ? 1'd1;
      signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1[go] ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 3'd0 & tdcc[go] ? 1'd1;
      bb0_2[go] = !bb0_2[done] & fsm0.out == 3'd1 & tdcc[go] ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 3'd2 & tdcc[go] ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 3'd3 & tdcc[go] ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 3'd4 & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] & tdcc[go] ? 3'd1;
      fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 3'd1 & bb0_2[done] & tdcc[go] ? 3'd2;
      fsm0.write_en = fsm0.out == 3'd1 & bb0_2[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] & tdcc[go] ? 3'd3;
      fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 & bb0_8[done] & tdcc[go] ? 3'd4;
      fsm0.write_en = fsm0.out == 3'd3 & bb0_8[done] & tdcc[go] ? 1'd1;
      fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] & tdcc[go] ? 3'd5;
      fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1[done] & tdcc[go] ? 1'd1;
      tdcc[done] = fsm0.out == 3'd5 ? 1'd1;
    }
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
  }
  control {
    tdcc;
  }
}
Current pass: wire-inliner
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out ? 32'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.right = assign_while_1_latch_go.out ? 32'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    bb0_10_done.in = arg_mem_1_done;
    std_add_4.left = bb0_10_go.out ? while_2_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    while_3_arg0_reg.write_en = invoke0_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    invoke0_done.in = while_3_arg0_reg.done;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    while_2_arg0_reg.write_en = invoke9_go.out ? 1'd1;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    invoke9_done.in = while_2_arg0_reg.done;
    std_add_4.left = invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.right = invoke9_go.out ? 32'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    while_3_arg0_reg.write_en = invoke10_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = invoke10_go.out ? 32'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    while_2_arg0_reg.write_en = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    early_reset_static_par_thread_done.in = ud0.out;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    fsm.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    while_1_arg0_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    early_reset_static_par_thread0_done.in = ud2.out;
    while_0_arg0_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg1_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    early_reset_static_par_thread1_done.in = ud4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_700_go.out ? 32'd3;
    early_reset_bb0_700_done.in = ud6.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_500_go.out ? 32'd3;
    early_reset_bb0_500_done.in = ud7.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    early_reset_bb0_300_done.in = ud8.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    early_reset_bb0_000_done.in = ud9.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out ? 1'd1;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.write_en = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    fsm0.write_en = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.write_en = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.write_en = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.write_en = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    bb0_2_done.in = arg_mem_0_done;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.right = bb0_2_go.out ? muli_2_reg.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_8_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out ? in3;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq_done.in = ud.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.go = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 1'd1;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    muli_2_reg.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq0_done.in = ud0.out;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    fsm.write_en = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.right = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq1_done.in = ud1.out;
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.write_en = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.write_en = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.write_en = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
  }
  control {}
}
Current pass: clk-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_1.clk = clk;
    mem_0.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out ? 32'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.right = assign_while_1_latch_go.out ? 32'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    bb0_10_done.in = arg_mem_1_done;
    std_add_4.left = bb0_10_go.out ? while_2_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    while_3_arg0_reg.write_en = invoke0_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    invoke0_done.in = while_3_arg0_reg.done;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    while_2_arg0_reg.write_en = invoke9_go.out ? 1'd1;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    invoke9_done.in = while_2_arg0_reg.done;
    std_add_4.left = invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.right = invoke9_go.out ? 32'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    while_3_arg0_reg.write_en = invoke10_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = invoke10_go.out ? 32'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    while_2_arg0_reg.write_en = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    early_reset_static_par_thread_done.in = ud0.out;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    fsm.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    while_1_arg0_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    early_reset_static_par_thread0_done.in = ud2.out;
    while_0_arg0_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg1_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    early_reset_static_par_thread1_done.in = ud4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_700_go.out ? 32'd3;
    early_reset_bb0_700_done.in = ud6.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_500_go.out ? 32'd3;
    early_reset_bb0_500_done.in = ud7.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    early_reset_bb0_300_done.in = ud8.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    early_reset_bb0_000_done.in = ud9.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out ? 1'd1;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.write_en = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    fsm0.write_en = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.write_en = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.write_en = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.write_en = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_3_arg0_reg.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg1_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg1_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    comb_reg.clk = clk;
    comb_reg0.clk = clk;
    comb_reg1.clk = clk;
    comb_reg2.clk = clk;
    fsm.clk = clk;
    signal_reg.clk = clk;
    fsm0.clk = clk;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    bb0_2_done.in = arg_mem_0_done;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.right = bb0_2_go.out ? muli_2_reg.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_8_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out ? in3;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq_done.in = ud.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.go = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 1'd1;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    muli_2_reg.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq0_done.in = ud0.out;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    fsm.write_en = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.right = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq1_done.in = ud1.out;
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.write_en = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.write_en = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.write_en = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    muli_1_reg.clk = clk;
    ret_arg0_reg.clk = clk;
    fsm.clk = clk;
    signal_reg.clk = clk;
    fsm0.clk = clk;
  }
  control {}
}
Current pass: reset-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_1.clk = clk;
    mem_0.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    mem_1.reset = reset;
    mem_0.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd18 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out ? 32'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out ? 1'd1;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out ? 1'd1;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.right = assign_while_1_latch_go.out ? 32'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    bb0_10_done.in = arg_mem_1_done;
    std_add_4.left = bb0_10_go.out ? while_2_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    while_3_arg0_reg.write_en = invoke0_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    invoke0_done.in = while_3_arg0_reg.done;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    while_2_arg0_reg.write_en = invoke9_go.out ? 1'd1;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    invoke9_done.in = while_2_arg0_reg.done;
    std_add_4.left = invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.right = invoke9_go.out ? 32'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    while_3_arg0_reg.write_en = invoke10_go.out ? 1'd1;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = invoke10_go.out ? 32'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    while_2_arg0_reg.write_en = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    early_reset_static_par_thread_done.in = ud0.out;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    fsm.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    while_1_arg0_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.write_en = early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    early_reset_static_par_thread0_done.in = ud2.out;
    while_0_arg0_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg1_reg.write_en = early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    early_reset_static_par_thread1_done.in = ud4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_700_go.out ? 32'd3;
    early_reset_bb0_700_done.in = ud6.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_500_go.out ? 32'd3;
    early_reset_bb0_500_done.in = ud7.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    early_reset_bb0_300_done.in = ud8.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    early_reset_bb0_000_done.in = ud9.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_300_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_500_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out ? 1'd1;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.write_en = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.write_en = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.write_en = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    fsm0.write_en = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.write_en = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.write_en = fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.write_en = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.write_en = fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.write_en = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.write_en = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.write_en = fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.write_en = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.write_en = fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_3_arg0_reg.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg1_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg1_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    comb_reg.clk = clk;
    comb_reg0.clk = clk;
    comb_reg1.clk = clk;
    comb_reg2.clk = clk;
    fsm.clk = clk;
    signal_reg.clk = clk;
    fsm0.clk = clk;
    muli_0_reg.reset = reset;
    std_mult_pipe_0.reset = reset;
    while_3_arg0_reg.reset = reset;
    while_2_arg0_reg.reset = reset;
    while_1_arg1_reg.reset = reset;
    while_1_arg0_reg.reset = reset;
    while_0_arg1_reg.reset = reset;
    while_0_arg0_reg.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    comb_reg.reset = reset;
    comb_reg0.reset = reset;
    comb_reg1.reset = reset;
    comb_reg2.reset = reset;
    fsm.reset = reset;
    signal_reg.reset = reset;
    fsm0.reset = reset;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    out0 = ret_arg0_reg.out;
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    fsm0.write_en = fsm0.out == 3'd5 ? 1'd1;
    tdcc_go.in = go;
    done = tdcc_done.out ? 1'd1;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    bb0_2_done.in = arg_mem_0_done;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.right = bb0_2_go.out ? muli_2_reg.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_8_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out ? in3;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq_done.in = ud.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out ? 1'd1;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.go = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 1'd1;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    muli_2_reg.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq0_done.in = ud0.out;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    fsm.write_en = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd7 & early_reset_static_seq0_go.out ? 1'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.right = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    early_reset_static_seq1_done.in = ud1.out;
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.write_en = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd3 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd7 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.write_en = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = fsm.out == 4'd4 & 1'b1 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.write_en = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.write_en = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.write_en = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.write_en = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 1'd1;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.write_en = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    muli_1_reg.clk = clk;
    ret_arg0_reg.clk = clk;
    fsm.clk = clk;
    signal_reg.clk = clk;
    fsm0.clk = clk;
    std_mult_pipe_3.reset = reset;
    muli_2_reg.reset = reset;
    muli_1_reg.reset = reset;
    ret_arg0_reg.reset = reset;
    fsm.reset = reset;
    signal_reg.reset = reset;
    fsm0.reset = reset;
  }
  control {}
}
Current pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    done = invoke0_done.out ? 1'd1;
    invoke0_go.in = go;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.clk = clk;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.clk = clk;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.reset = reset;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    invoke9_done.in = while_2_arg0_reg.done;
    done = tdcc_done.out ? 1'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out | fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.reset = reset;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    early_reset_static_par_thread0_done.in = ud2.out;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out | !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.clk = clk;
    comb_reg1.reset = reset;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.clk = clk;
    comb_reg0.reset = reset;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    while_2_arg0_reg.write_en = invoke9_go.out | fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.clk = clk;
    comb_reg2.reset = reset;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    fsm0.write_en = fsm0.out == 5'd18 | fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out | fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out | fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.clk = clk;
    while_1_arg1_reg.reset = reset;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    early_reset_static_par_thread1_done.in = ud4.out;
    early_reset_bb0_300_done.in = ud8.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    while_3_arg0_reg.write_en = invoke0_go.out | invoke10_go.out ? 1'd1;
    while_3_arg0_reg.clk = clk;
    while_3_arg0_reg.reset = reset;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    invoke0_done.in = while_3_arg0_reg.done;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    signal_reg.write_en = signal_reg.out | !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    std_slt_3.right = early_reset_bb0_700_go.out | early_reset_bb0_500_go.out ? 32'd3;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out | !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.left = bb0_10_go.out | invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out | assign_while_1_latch_go.out | invoke9_go.out | invoke10_go.out ? 32'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    early_reset_bb0_500_done.in = ud7.out;
    early_reset_bb0_000_done.in = ud9.out;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out | !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.clk = clk;
    while_0_arg1_reg.reset = reset;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out | !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_done.in = ud0.out;
    bb0_10_done.in = arg_mem_1_done;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    early_reset_bb0_700_done.in = ud6.out;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    done = tdcc_done.out ? 1'd1;
    out0 = ret_arg0_reg.out;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out != 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out != 4'd4 & early_reset_static_seq1_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.clk = clk;
    ret_arg0_reg.reset = reset;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out | fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out | (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out | fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    early_reset_static_seq1_done.in = ud1.out;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_2_go.out | bb0_8_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    tdcc_go.in = go;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    fsm0.write_en = fsm0.out == 3'd5 | fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out | fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out | fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out | fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out | fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    signal_reg.write_en = signal_reg.out | fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
    bb0_2_done.in = arg_mem_0_done;
    early_reset_static_seq_done.in = ud.out;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_done.in = ud0.out;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
  }
  control {}
}
Current pass: default-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    done = invoke0_done.out ? 1'd1;
    invoke0_go.in = go;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.clk = clk;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.clk = clk;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.reset = reset;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    invoke9_done.in = while_2_arg0_reg.done;
    done = tdcc_done.out ? 1'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out | fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.reset = reset;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    early_reset_static_par_thread0_done.in = ud2.out;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out | !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.clk = clk;
    comb_reg1.reset = reset;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.clk = clk;
    comb_reg0.reset = reset;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    while_2_arg0_reg.write_en = invoke9_go.out | fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.clk = clk;
    comb_reg2.reset = reset;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    fsm0.write_en = fsm0.out == 5'd18 | fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out | fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out | fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.clk = clk;
    while_1_arg1_reg.reset = reset;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    early_reset_static_par_thread1_done.in = ud4.out;
    early_reset_bb0_300_done.in = ud8.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    while_3_arg0_reg.write_en = invoke0_go.out | invoke10_go.out ? 1'd1;
    while_3_arg0_reg.clk = clk;
    while_3_arg0_reg.reset = reset;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    invoke0_done.in = while_3_arg0_reg.done;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    signal_reg.write_en = signal_reg.out | !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    std_slt_3.right = early_reset_bb0_700_go.out | early_reset_bb0_500_go.out ? 32'd3;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out | !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.left = bb0_10_go.out | invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out | assign_while_1_latch_go.out | invoke9_go.out | invoke10_go.out ? 32'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    early_reset_bb0_500_done.in = ud7.out;
    early_reset_bb0_000_done.in = ud9.out;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out | !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.clk = clk;
    while_0_arg1_reg.reset = reset;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out | !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_done.in = ud0.out;
    bb0_10_done.in = arg_mem_1_done;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    early_reset_bb0_700_done.in = ud6.out;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
    arg_mem_2_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    done = tdcc_done.out ? 1'd1;
    out0 = ret_arg0_reg.out;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out != 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out != 4'd4 & early_reset_static_seq1_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.clk = clk;
    ret_arg0_reg.reset = reset;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out | fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out | (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out | fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    early_reset_static_seq1_done.in = ud1.out;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_2_go.out | bb0_8_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    tdcc_go.in = go;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    fsm0.write_en = fsm0.out == 3'd5 | fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out | fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out | fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out | fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out | fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    signal_reg.write_en = signal_reg.out | fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
    bb0_2_done.in = arg_mem_0_done;
    early_reset_static_seq_done.in = ud.out;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_done.in = ud0.out;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
    arg_mem_1_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
extern "/home/kelvin/calyx/primitives/binary_operators.sv" {
  comb primitive std_fp_add<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_sub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_mult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_div_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_gt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_sadd<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_ssub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_smult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_sdiv_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_sgt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_slt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  primitive std_mult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_div_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_quotient: WIDTH, @stable out_remainder: WIDTH, @done done: 1);
  comb primitive std_sadd<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_ssub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_smult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_sdiv_pipe[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (out_quotient: WIDTH, out_remainder: WIDTH, @done done: 1);
  comb primitive std_sgt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_seq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sneq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sle<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_srsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_signext<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_const_mult<"share"=1>[WIDTH, VALUE](@data in: WIDTH) -> (out: WIDTH);
}
primitive undef<"share"=1>[WIDTH]() -> (out: WIDTH) {
  assign out = 'x;
}
comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH) {
  assign out = VALUE;
}
comb primitive std_wire<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH) {
  assign out = in;
}
comb primitive std_add<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left + right;
}
comb primitive std_lsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left << right;
}
primitive std_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 0;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
primitive init_one_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 1;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
extern "/home/kelvin/calyx/primitives/core.sv" {
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_cat<"share"=1>[LEFT_WIDTH, RIGHT_WIDTH, OUT_WIDTH](@data left: LEFT_WIDTH, @data right: RIGHT_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_bit_slice<"share"=1>[IN_WIDTH, START_IDX, END_IDX, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_not<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_rsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](@data cond: 1, @data tru: WIDTH, @data fal: WIDTH) -> (out: WIDTH);
  primitive std_skid_buffer<"share"=1>[WIDTH](@data in: WIDTH, i_valid: 1, i_ready: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, o_valid: 1, o_ready: 1);
  primitive std_bypass_reg<"share"=1>[WIDTH](@data in: WIDTH, @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1);
}
extern "/home/kelvin/calyx/primitives/memories/seq.sv" {
  primitive seq_mem_d1[WIDTH, SIZE, IDX_SIZE](@clk clk: 1, @reset reset: 1, @write_together @data addr0: IDX_SIZE, @write_together @interval @go content_en: 1, @write_together(2) @control write_en: 1, @write_together(2) @data write_data: WIDTH) -> (@stable read_data: WIDTH, @done done: 1);
  primitive seq_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@clk clk: 1, @reset reset: 1, @write_together @data addr0: D0_IDX_SIZE, @write_together @data addr1: D1_IDX_SIZE, @write_together @interval @go content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: WIDTH) -> (@stable read_data: WIDTH, @done done: 1);
  primitive seq_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@clk clk: 1, @reset reset: 1, @write_together @data addr0: D0_IDX_SIZE, @write_together @data addr1: D1_IDX_SIZE, @write_together @data addr2: D2_IDX_SIZE, @write_together @interval @go content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: WIDTH) -> (@stable read_data: WIDTH, @done done: 1);
  primitive seq_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@clk clk: 1, @reset reset: 1, @write_together @data addr0: D0_IDX_SIZE, @write_together @data addr1: D1_IDX_SIZE, @write_together @data addr2: D2_IDX_SIZE, @write_together @data addr3: D3_IDX_SIZE, @write_together @interval @go content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: WIDTH) -> (@stable read_data: WIDTH, @done done: 1);
}
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    done = invoke0_done.out ? 1'd1;
    invoke0_go.in = go;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.clk = clk;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.clk = clk;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.reset = reset;
  }
  control {}
}
component stencil_stencil2d<"state_share"=1>(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(1);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated ud2 = undef(1);
    @generated ud4 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated ud8 = undef(1);
    @generated ud9 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
    @generated assign_while_0_latch_go = std_wire(1);
    @generated assign_while_0_latch_done = std_wire(1);
    @generated assign_while_1_latch_go = std_wire(1);
    @generated assign_while_1_latch_done = std_wire(1);
    @generated bb0_10_go = std_wire(1);
    @generated bb0_10_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke8_go = std_wire(1);
    @generated invoke8_done = std_wire(1);
    @generated invoke9_go = std_wire(1);
    @generated invoke9_done = std_wire(1);
    @generated invoke10_go = std_wire(1);
    @generated invoke10_done = std_wire(1);
    @generated early_reset_static_par_thread_go = std_wire(1);
    @generated early_reset_static_par_thread_done = std_wire(1);
    @generated early_reset_static_par_thread0_go = std_wire(1);
    @generated early_reset_static_par_thread0_done = std_wire(1);
    @generated early_reset_static_par_thread1_go = std_wire(1);
    @generated early_reset_static_par_thread1_done = std_wire(1);
    @generated early_reset_bb0_700_go = std_wire(1);
    @generated early_reset_bb0_700_done = std_wire(1);
    @generated early_reset_bb0_500_go = std_wire(1);
    @generated early_reset_bb0_500_done = std_wire(1);
    @generated early_reset_bb0_300_go = std_wire(1);
    @generated early_reset_bb0_300_done = std_wire(1);
    @generated early_reset_bb0_000_go = std_wire(1);
    @generated early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_bb0_000_go = std_wire(1);
    @generated wrapper_early_reset_bb0_000_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread_done = std_wire(1);
    @generated wrapper_early_reset_bb0_300_go = std_wire(1);
    @generated wrapper_early_reset_bb0_300_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread0_done = std_wire(1);
    @generated wrapper_early_reset_bb0_500_go = std_wire(1);
    @generated wrapper_early_reset_bb0_500_done = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_go = std_wire(1);
    @generated wrapper_early_reset_static_par_thread1_done = std_wire(1);
    @generated wrapper_early_reset_bb0_700_go = std_wire(1);
    @generated wrapper_early_reset_bb0_700_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    assign_while_0_latch_go.in = !assign_while_0_latch_done.out & fsm0.out == 5'd9 & tdcc_go.out ? 1'd1;
    assign_while_0_latch_done.in = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    assign_while_1_latch_go.in = !assign_while_1_latch_done.out & fsm0.out == 5'd11 & tdcc_go.out ? 1'd1;
    invoke9_go.in = !invoke9_done.out & fsm0.out == 5'd14 & tdcc_go.out ? 1'd1;
    invoke9_done.in = while_2_arg0_reg.done;
    done = tdcc_done.out ? 1'd1;
    arg_mem_1_write_data = bb0_10_go.out ? while_1_arg1_reg.out;
    arg_mem_0_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    arg_mem_0_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    arg_mem_0_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    arg_mem_2_addr0 = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    arg_mem_2_content_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    arg_mem_1_write_en = bb0_10_go.out ? 1'd1;
    arg_mem_2_write_en = invoke8_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    arg_mem_1_addr0 = bb0_10_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_10_go.out ? 1'd1;
    fsm.write_en = fsm.out != 3'd3 & early_reset_static_par_thread_go.out | fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 3'd3 & early_reset_static_par_thread_go.out ? adder.out;
    fsm.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 3'd0;
    adder.left = early_reset_static_par_thread_go.out ? fsm.out;
    adder.right = early_reset_static_par_thread_go.out ? 3'd1;
    early_reset_static_par_thread1_go.in = wrapper_early_reset_static_par_thread1_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_go.in = !wrapper_early_reset_static_par_thread_done.out & fsm0.out == 5'd2 & tdcc_go.out ? 1'd1;
    while_1_arg0_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    while_1_arg0_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg0_reg.in = assign_while_1_latch_go.out ? std_add_4.out;
    comb_reg.write_en = early_reset_bb0_000_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.reset = reset;
    comb_reg.in = early_reset_bb0_000_go.out ? std_slt_3.out;
    early_reset_static_par_thread0_done.in = ud2.out;
    wrapper_early_reset_bb0_300_go.in = !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd3 & tdcc_go.out | !wrapper_early_reset_bb0_300_done.out & fsm0.out == 5'd15 & tdcc_go.out ? 1'd1;
    while_0_arg0_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    while_0_arg0_reg.in = early_reset_static_par_thread1_go.out ? 32'd0;
    while_0_arg0_reg.in = assign_while_0_latch_go.out ? std_add_4.out;
    comb_reg1.write_en = early_reset_bb0_500_go.out ? 1'd1;
    comb_reg1.clk = clk;
    comb_reg1.reset = reset;
    comb_reg1.in = early_reset_bb0_500_go.out ? std_slt_3.out;
    bb0_10_go.in = !bb0_10_done.out & fsm0.out == 5'd13 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_bb0_500_done.in = signal_reg.out ? 1'd1;
    muli_0_reg.write_en = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm.out == 3'd3 & early_reset_static_par_thread_go.out ? std_mult_pipe_0.out;
    comb_reg0.write_en = early_reset_bb0_300_go.out ? 1'd1;
    comb_reg0.clk = clk;
    comb_reg0.reset = reset;
    comb_reg0.in = early_reset_bb0_300_go.out ? std_slt_3.out;
    invoke0_go.in = !invoke0_done.out & fsm0.out == 5'd0 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke8_go.out ? arg_mem_2_read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke8_go.out ? arg_mem_2_done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke8_go.out ? while_3_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke8_go.out ? while_0_arg1_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke8_go.out ? arg_mem_0_read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke8_go.out ? while_1_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke8_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke8_go.out ? while_2_arg0_reg.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke8_go.out ? arg_mem_0_done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke8_go.out ? while_0_arg0_reg.out;
    while_2_arg0_reg.write_en = invoke9_go.out | fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 1'd1;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    while_2_arg0_reg.in = fsm.out == 3'd0 & early_reset_static_par_thread_go.out ? 32'd0;
    while_2_arg0_reg.in = invoke9_go.out ? std_add_4.out;
    comb_reg2.write_en = early_reset_bb0_700_go.out ? 1'd1;
    comb_reg2.clk = clk;
    comb_reg2.reset = reset;
    comb_reg2.in = early_reset_bb0_700_go.out ? std_slt_3.out;
    fsm0.write_en = fsm0.out == 5'd18 | fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out | fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out | fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out | fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out | fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out | fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out | fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 5'd0 & invoke0_done.out & tdcc_go.out ? 5'd1;
    fsm0.in = fsm0.out == 5'd14 & invoke9_done.out & tdcc_go.out ? 5'd15;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & !comb_reg.out & tdcc_go.out ? 5'd18;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & !comb_reg0.out & tdcc_go.out ? 5'd16;
    fsm0.in = fsm0.out == 5'd18 ? 5'd0;
    fsm0.in = fsm0.out == 5'd2 & wrapper_early_reset_static_par_thread_done.out & tdcc_go.out ? 5'd3;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & !comb_reg1.out & tdcc_go.out ? 5'd13;
    fsm0.in = fsm0.out == 5'd13 & bb0_10_done.out & tdcc_go.out ? 5'd14;
    fsm0.in = fsm0.out == 5'd4 & wrapper_early_reset_static_par_thread0_done.out & tdcc_go.out ? 5'd5;
    fsm0.in = fsm0.out == 5'd11 & assign_while_1_latch_done.out & tdcc_go.out ? 5'd12;
    fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out | fsm0.out == 5'd17 & wrapper_early_reset_bb0_000_done.out & comb_reg.out & tdcc_go.out ? 5'd2;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & comb_reg2.out & tdcc_go.out ? 5'd8;
    fsm0.in = fsm0.out == 5'd9 & assign_while_0_latch_done.out & tdcc_go.out ? 5'd10;
    fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_par_thread1_done.out & tdcc_go.out ? 5'd7;
    fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out | fsm0.out == 5'd10 & wrapper_early_reset_bb0_700_done.out & !comb_reg2.out & tdcc_go.out ? 5'd11;
    fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out | fsm0.out == 5'd15 & wrapper_early_reset_bb0_300_done.out & comb_reg0.out & tdcc_go.out ? 5'd4;
    fsm0.in = fsm0.out == 5'd5 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out | fsm0.out == 5'd12 & wrapper_early_reset_bb0_500_done.out & comb_reg1.out & tdcc_go.out ? 5'd6;
    fsm0.in = fsm0.out == 5'd16 & invoke10_done.out & tdcc_go.out ? 5'd17;
    fsm0.in = fsm0.out == 5'd8 & invoke8_done.out & tdcc_go.out ? 5'd9;
    invoke8_go.in = !invoke8_done.out & fsm0.out == 5'd8 & tdcc_go.out ? 1'd1;
    invoke10_done.in = while_3_arg0_reg.done;
    early_reset_bb0_300_go.in = wrapper_early_reset_bb0_300_go.out ? 1'd1;
    while_1_arg1_reg.write_en = assign_while_1_latch_go.out | early_reset_static_par_thread0_go.out ? 1'd1;
    while_1_arg1_reg.clk = clk;
    while_1_arg1_reg.reset = reset;
    while_1_arg1_reg.in = early_reset_static_par_thread0_go.out ? 32'd0;
    while_1_arg1_reg.in = assign_while_1_latch_go.out ? while_0_arg1_reg.out;
    invoke8_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    early_reset_static_par_thread1_done.in = ud4.out;
    early_reset_bb0_300_done.in = ud8.out;
    early_reset_bb0_000_go.in = wrapper_early_reset_bb0_000_go.out ? 1'd1;
    wrapper_early_reset_bb0_700_done.in = signal_reg.out ? 1'd1;
    while_3_arg0_reg.write_en = invoke0_go.out | invoke10_go.out ? 1'd1;
    while_3_arg0_reg.clk = clk;
    while_3_arg0_reg.reset = reset;
    while_3_arg0_reg.in = invoke0_go.out ? 32'd0;
    while_3_arg0_reg.in = invoke10_go.out ? std_add_4.out;
    invoke0_done.in = while_3_arg0_reg.done;
    wrapper_early_reset_static_par_thread0_go.in = !wrapper_early_reset_static_par_thread0_done.out & fsm0.out == 5'd4 & tdcc_go.out ? 1'd1;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? while_3_arg0_reg.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 1'd1;
    std_mult_pipe_0.right = fsm.out < 3'd3 & early_reset_static_par_thread_go.out ? 32'd64;
    signal_reg.write_en = signal_reg.out | !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = !signal_reg.out & wrapper_early_reset_bb0_000_go.out | fsm.out == 3'd3 & !signal_reg.out & wrapper_early_reset_static_par_thread_go.out | !signal_reg.out & wrapper_early_reset_bb0_300_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread0_go.out | !signal_reg.out & wrapper_early_reset_bb0_500_go.out | !signal_reg.out & wrapper_early_reset_static_par_thread1_go.out | !signal_reg.out & wrapper_early_reset_bb0_700_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    early_reset_static_par_thread_go.in = wrapper_early_reset_static_par_thread_go.out ? 1'd1;
    early_reset_bb0_700_go.in = wrapper_early_reset_bb0_700_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread0_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_go.in = !wrapper_early_reset_static_par_thread1_done.out & fsm0.out == 5'd6 & tdcc_go.out ? 1'd1;
    std_slice_0.in = bb0_10_go.out ? std_add_4.out;
    std_slt_3.left = early_reset_bb0_500_go.out ? while_1_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_700_go.out ? while_0_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_300_go.out ? while_2_arg0_reg.out;
    std_slt_3.left = early_reset_bb0_000_go.out ? while_3_arg0_reg.out;
    std_slt_3.right = early_reset_bb0_300_go.out ? 32'd62;
    std_slt_3.right = early_reset_bb0_700_go.out | early_reset_bb0_500_go.out ? 32'd3;
    std_slt_3.right = early_reset_bb0_000_go.out ? 32'd126;
    assign_while_1_latch_done.in = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    early_reset_static_par_thread0_go.in = wrapper_early_reset_static_par_thread0_go.out ? 1'd1;
    wrapper_early_reset_bb0_000_go.in = !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd1 & tdcc_go.out | !wrapper_early_reset_bb0_000_done.out & fsm0.out == 5'd17 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread_done.in = signal_reg.out ? 1'd1;
    std_add_4.left = assign_while_1_latch_go.out ? while_1_arg0_reg.out;
    std_add_4.left = assign_while_0_latch_go.out ? while_0_arg0_reg.out;
    std_add_4.left = bb0_10_go.out | invoke9_go.out ? while_2_arg0_reg.out;
    std_add_4.left = invoke10_go.out ? while_3_arg0_reg.out;
    std_add_4.right = bb0_10_go.out ? muli_0_reg.out;
    std_add_4.right = assign_while_0_latch_go.out | assign_while_1_latch_go.out | invoke9_go.out | invoke10_go.out ? 32'd1;
    early_reset_bb0_500_go.in = wrapper_early_reset_bb0_500_go.out ? 1'd1;
    early_reset_bb0_500_done.in = ud7.out;
    early_reset_bb0_000_done.in = ud9.out;
    wrapper_early_reset_bb0_000_done.in = signal_reg.out ? 1'd1;
    wrapper_early_reset_bb0_700_go.in = !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd7 & tdcc_go.out | !wrapper_early_reset_bb0_700_done.out & fsm0.out == 5'd10 & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm0.out == 5'd18 ? 1'd1;
    while_0_arg1_reg.write_en = assign_while_0_latch_go.out | early_reset_static_par_thread1_go.out ? 1'd1;
    while_0_arg1_reg.clk = clk;
    while_0_arg1_reg.reset = reset;
    while_0_arg1_reg.in = assign_while_0_latch_go.out ? stencil_stencil2d_inner_loop_0_instance.out0;
    while_0_arg1_reg.in = early_reset_static_par_thread1_go.out ? while_1_arg1_reg.out;
    wrapper_early_reset_bb0_500_go.in = !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd5 & tdcc_go.out | !wrapper_early_reset_bb0_500_done.out & fsm0.out == 5'd12 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_par_thread1_done.in = signal_reg.out ? 1'd1;
    early_reset_static_par_thread_done.in = ud0.out;
    bb0_10_done.in = arg_mem_1_done;
    invoke10_go.in = !invoke10_done.out & fsm0.out == 5'd16 & tdcc_go.out ? 1'd1;
    early_reset_bb0_700_done.in = ud6.out;
    wrapper_early_reset_bb0_300_done.in = signal_reg.out ? 1'd1;
    arg_mem_2_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0<"state_share"=1>(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data ret_arg0_reg = std_reg(32);
    @generated fsm = std_reg(4);
    @generated adder = std_add(4);
    @generated ud = undef(1);
    @generated adder0 = std_add(4);
    @generated ud0 = undef(1);
    @generated adder1 = std_add(4);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(3);
    @generated bb0_2_go = std_wire(1);
    @generated bb0_2_done = std_wire(1);
    @generated bb0_8_go = std_wire(1);
    @generated bb0_8_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated early_reset_static_seq0_go = std_wire(1);
    @generated early_reset_static_seq0_done = std_wire(1);
    @generated early_reset_static_seq1_go = std_wire(1);
    @generated early_reset_static_seq1_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq0_go = std_wire(1);
    @generated wrapper_early_reset_static_seq0_done = std_wire(1);
    @generated wrapper_early_reset_static_seq1_go = std_wire(1);
    @generated wrapper_early_reset_static_seq1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    adder1.left = early_reset_static_seq1_go.out ? fsm.out;
    adder1.right = early_reset_static_seq1_go.out ? 4'd1;
    done = tdcc_done.out ? 1'd1;
    out0 = ret_arg0_reg.out;
    arg_mem_0_content_en = bb0_2_go.out ? 1'd1;
    arg_mem_0_addr0 = bb0_2_go.out ? std_slice_1.out;
    arg_mem_0_write_en = bb0_2_go.out ? 1'd0;
    arg_mem_1_write_en = bb0_8_go.out ? 1'd0;
    arg_mem_1_addr0 = bb0_8_go.out ? std_slice_0.out;
    arg_mem_1_content_en = bb0_8_go.out ? 1'd1;
    fsm.write_en = fsm.out != 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out != 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out != 4'd4 & early_reset_static_seq1_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 4'd4 & early_reset_static_seq1_go.out ? adder1.out;
    fsm.in = fsm.out != 4'd3 & early_reset_static_seq_go.out ? adder.out;
    fsm.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 4'd0;
    fsm.in = fsm.out != 4'd7 & early_reset_static_seq0_go.out ? adder0.out;
    adder.left = early_reset_static_seq_go.out ? fsm.out;
    adder.right = early_reset_static_seq_go.out ? 4'd1;
    ret_arg0_reg.write_en = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? 1'd1;
    ret_arg0_reg.clk = clk;
    ret_arg0_reg.reset = reset;
    ret_arg0_reg.in = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? std_add_3.out;
    std_add_2.left = bb0_8_go.out ? std_add_1.out;
    std_add_2.right = bb0_8_go.out ? in5;
    bb0_2_go.in = !bb0_2_done.out & fsm0.out == 3'd1 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_go.in = wrapper_early_reset_static_seq0_go.out ? 1'd1;
    wrapper_early_reset_static_seq1_done.in = signal_reg.out ? 1'd1;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_0_read_data;
    std_mult_pipe_3.left = fsm.out >= 4'd4 & fsm.out < 4'd7 & early_reset_static_seq0_go.out ? in6;
    std_mult_pipe_3.left = fsm.out < 4'd3 & early_reset_static_seq_go.out | fsm.out < 4'd3 & early_reset_static_seq0_go.out ? in3;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_3.go = fsm.out < 4'd3 & early_reset_static_seq_go.out | (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out | fsm.out < 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq1_go.out ? arg_mem_1_read_data;
    std_mult_pipe_3.right = (fsm.out < 4'd3 | fsm.out >= 4'd4 & fsm.out < 4'd7) & early_reset_static_seq0_go.out ? 32'd64;
    std_mult_pipe_3.right = fsm.out < 4'd3 & early_reset_static_seq_go.out ? 32'd3;
    early_reset_static_seq1_done.in = ud1.out;
    wrapper_early_reset_static_seq0_go.in = !wrapper_early_reset_static_seq0_done.out & fsm0.out == 3'd2 & tdcc_go.out ? 1'd1;
    std_add_3.left = fsm.out == 4'd4 & early_reset_static_seq1_go.out ? in1;
    std_add_3.left = bb0_2_go.out ? in0;
    std_add_3.left = bb0_8_go.out ? std_add_2.out;
    std_add_3.right = bb0_2_go.out | bb0_8_go.out | fsm.out == 4'd4 & early_reset_static_seq1_go.out ? muli_2_reg.out;
    std_add_1.left = bb0_8_go.out ? muli_1_reg.out;
    std_add_1.right = bb0_8_go.out ? in0;
    muli_1_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? 1'd1;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_1_reg.in = fsm.out == 4'd3 & early_reset_static_seq0_go.out ? std_mult_pipe_3.out;
    tdcc_go.in = go;
    early_reset_static_seq1_go.in = wrapper_early_reset_static_seq1_go.out ? 1'd1;
    fsm0.write_en = fsm0.out == 3'd5 | fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out | fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out | fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out | fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out | fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 1'd1;
    fsm0.clk = clk;
    fsm0.reset = reset;
    fsm0.in = fsm0.out == 3'd4 & wrapper_early_reset_static_seq1_done.out & tdcc_go.out ? 3'd5;
    fsm0.in = fsm0.out == 3'd1 & bb0_2_done.out & tdcc_go.out ? 3'd2;
    fsm0.in = fsm0.out == 3'd3 & bb0_8_done.out & tdcc_go.out ? 3'd4;
    fsm0.in = fsm0.out == 3'd0 & wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 3'd1;
    fsm0.in = fsm0.out == 3'd2 & wrapper_early_reset_static_seq0_done.out & tdcc_go.out ? 3'd3;
    fsm0.in = fsm0.out == 3'd5 ? 3'd0;
    wrapper_early_reset_static_seq_done.in = signal_reg.out ? 1'd1;
    adder0.left = early_reset_static_seq0_go.out ? fsm.out;
    adder0.right = early_reset_static_seq0_go.out ? 4'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    muli_2_reg.write_en = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? 1'd1;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    muli_2_reg.in = fsm.out == 4'd3 & early_reset_static_seq_go.out | fsm.out == 4'd7 & early_reset_static_seq0_go.out | fsm.out == 4'd3 & early_reset_static_seq1_go.out ? std_mult_pipe_3.out;
    signal_reg.write_en = signal_reg.out | fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm.out == 4'd3 & !signal_reg.out & wrapper_early_reset_static_seq_go.out | fsm.out == 4'd7 & !signal_reg.out & wrapper_early_reset_static_seq0_go.out | fsm.out == 4'd4 & !signal_reg.out & wrapper_early_reset_static_seq1_go.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    bb0_8_done.in = arg_mem_1_done;
    std_slice_0.in = bb0_8_go.out ? std_add_3.out;
    std_slice_1.in = bb0_2_go.out ? std_add_3.out;
    tdcc_done.in = fsm0.out == 3'd5 ? 1'd1;
    bb0_2_done.in = arg_mem_0_done;
    early_reset_static_seq_done.in = ud.out;
    wrapper_early_reset_static_seq1_go.in = !wrapper_early_reset_static_seq1_done.out & fsm0.out == 3'd4 & tdcc_go.out ? 1'd1;
    early_reset_static_seq0_done.in = ud0.out;
    wrapper_early_reset_static_seq_go.in = !wrapper_early_reset_static_seq_done.out & fsm0.out == 3'd0 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_static_seq0_done.in = signal_reg.out ? 1'd1;
    bb0_8_go.in = !bb0_8_done.out & fsm0.out == 3'd3 & tdcc_go.out ? 1'd1;
    arg_mem_1_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
