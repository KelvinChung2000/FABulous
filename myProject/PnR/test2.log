Current pass: well-formed
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_1 = seq_mem_d1(32, 8192, 13);
    @external mem_0 = seq_mem_d1(32, 9, 4);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    std_slt_3 = std_slt(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_3_arg0_reg = std_reg(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg1_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.in = 32'd0;
      while_3_arg0_reg.write_en = 1'd1;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.right = 32'd64;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_2.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_1_arg0_reg.out;
      std_add_2.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.content_en = 1'd1;
      std_add_4.left = while_2_arg0_reg.out;
      std_add_4.right = muli_0_reg.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_1.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_2_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      while_3_arg0_reg.in = std_add_0.out;
      while_3_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_3_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_3_arg0_reg.out;
      std_slt_0.right = 32'd126;
    }
    comb group bb0_3 {
      std_slt_1.left = while_2_arg0_reg.out;
      std_slt_1.right = 32'd62;
    }
    comb group bb0_5 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd3;
    }
    comb group bb0_7 {
      std_slt_3.left = while_0_arg0_reg.out;
      std_slt_3.right = 32'd3;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    std_slice_1 = std_slice(32, 4);
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_2 = std_add(32);
    std_add_1 = std_add(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    ret_arg0_reg = std_reg(32);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.right = 32'd3;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_0.left = in0;
      std_add_0.right = muli_0_reg.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.right = 32'd64;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.right = 32'd64;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_3.left = std_add_2.out;
      std_add_2.left = std_add_1.out;
      std_add_1.left = muli_1_reg.out;
      std_add_1.right = in0;
      std_add_2.right = in5;
      std_add_3.right = muli_2_reg.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      ret_arg0_reg.in = std_add_4.out;
      ret_arg0_reg.write_en = 1'd1;
      std_add_4.left = in1;
      std_add_4.right = muli_3_reg.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: canonicalize
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_1 = seq_mem_d1(32, 8192, 13);
    @external mem_0 = seq_mem_d1(32, 9, 4);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    std_slt_3 = std_slt(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_3_arg0_reg = std_reg(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg1_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    std_slice_1 = std_slice(32, 4);
    std_slice_0 = std_slice(32, 13);
    std_add_4 = std_add(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_2 = std_add(32);
    std_add_1 = std_add(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    std_add_0 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    ret_arg0_reg = std_reg(32);
    ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    seq {
      seq {
        invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
          in5 = in3,
          in6 = in4,
          in0 = in0,
          in1 = in1,
          in3 = in2
        )();
      }
    }
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_3_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_2_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                seq {
                  par {
                    assign_while_1_init_0;
                    assign_while_1_init_1;
                  }
                  while std_slt_2.out with bb0_5 {
                    seq {
                      par {
                        assign_while_0_init_0;
                        assign_while_0_init_1;
                      }
                      while std_slt_3.out with bb0_7 {
                        seq {
                          seq {
                            invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                              in5 = while_2_arg0_reg.out,
                              in6 = while_3_arg0_reg.out,
                              in0 = while_0_arg0_reg.out,
                              in1 = while_0_arg1_reg.out,
                              in3 = while_1_arg0_reg.out
                            )();
                          }
                          assign_while_0_latch;
                        }
                      }
                      assign_while_1_latch;
                    }
                  }
                  bb0_10;
                }
                assign_while_2_latch;
              }
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        bb0_0;
        bb0_2;
        bb0_3;
        bb0_6;
        bb0_8;
        bb0_9;
        ret_assign_0;
      }
    }
  }
}
Current pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      bb0_0;
      bb0_2;
      bb0_3;
      bb0_6;
      bb0_8;
      bb0_9;
      ret_assign_0;
    }
  }
}
Current pass: compile-sync-without-sync-reg
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group bb0_0 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      bb0_0[done] = muli_0_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_3 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      bb0_3[done] = muli_1_reg.done;
    }
    group bb0_6 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      bb0_6[done] = muli_2_reg.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group bb0_9 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      bb0_9[done] = muli_3_reg.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      bb0_0;
      bb0_2;
      bb0_3;
      bb0_6;
      bb0_8;
      bb0_9;
      ret_assign_0;
    }
  }
}
Current pass: group2seq
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        beg_spl_bb0_0;
        end_spl_bb0_0;
      }
      bb0_2;
      seq {
        beg_spl_bb0_3;
        end_spl_bb0_3;
      }
      seq {
        beg_spl_bb0_6;
        end_spl_bb0_6;
      }
      bb0_8;
      seq {
        beg_spl_bb0_9;
        end_spl_bb0_9;
      }
      ret_assign_0;
    }
  }
}
Current pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_3_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_2_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                assign_while_1_init_0;
                assign_while_1_init_1;
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    assign_while_0_init_0;
                    assign_while_0_init_1;
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              assign_while_2_latch;
            }
          }
          assign_while_3_latch;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        beg_spl_bb0_0;
        end_spl_bb0_0;
      }
      bb0_2;
      seq {
        beg_spl_bb0_3;
        end_spl_bb0_3;
      }
      seq {
        beg_spl_bb0_6;
        end_spl_bb0_6;
      }
      bb0_8;
      seq {
        beg_spl_bb0_9;
        end_spl_bb0_9;
      }
      ret_assign_0;
    }
  }
}
Current pass: group2invoke
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_2_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: inline
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_2_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_2_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              right = 32'd64,
              left = while_3_arg0_reg.out
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_2_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              par {
                invoke while_1_arg0_reg(
                  in = 32'd0
                )();
                invoke while_1_arg1_reg(
                  in = 32'd0
                )();
              }
              while std_slt_2.out with bb0_5 {
                seq {
                  par {
                    invoke while_0_arg0_reg(
                      in = 32'd0
                    )();
                    invoke while_0_arg1_reg(
                      in = while_1_arg1_reg.out
                    )();
                  }
                  while std_slt_3.out with bb0_7 {
                    seq {
                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                        in5 = while_2_arg0_reg.out,
                        in6 = while_3_arg0_reg.out,
                        in0 = while_0_arg0_reg.out,
                        in1 = while_0_arg1_reg.out,
                        in3 = while_1_arg0_reg.out
                      )();
                      assign_while_0_latch;
                    }
                  }
                  assign_while_1_latch;
                }
              }
              bb0_10;
              invoke while_2_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_3_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: simplify-with-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {}
  control {
    invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1](
      in5 = in3,
      in6 = in4,
      in0 = in0,
      in1 = in1,
      in3 = in2
    )();
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @data ref arg_mem_2 = seq_mem_d1(32, 9, 4);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 8192, 13);
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd1;
      arg_mem_1.write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<1> group comb_invoke1 {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      comb_wire3.in = std_add_1.out;
    }
    static<1> group comb_invoke00 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      comb_wire4.in = std_add_0.out;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_3_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              seq {
                invoke std_mult_pipe_0(
                  right = 32'd64,
                  left = while_3_arg0_reg.out
                )();
                invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              invoke while_2_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      par {
                        invoke while_1_arg0_reg(
                          in = 32'd0
                        )();
                        invoke while_1_arg1_reg(
                          in = 32'd0
                        )();
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              par {
                                invoke while_0_arg0_reg(
                                  in = 32'd0
                                )();
                                invoke while_0_arg1_reg(
                                  in = while_1_arg1_reg.out
                                )();
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke stencil_stencil2d_inner_loop_0_instance[arg_mem_0 = arg_mem_2,arg_mem_1 = arg_mem_0](
                                        in5 = while_2_arg0_reg.out,
                                        in6 = while_3_arg0_reg.out,
                                        in0 = while_0_arg0_reg.out,
                                        in1 = while_0_arg1_reg.out,
                                        in3 = while_1_arg0_reg.out
                                      )();
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke while_2_arg0_reg(
                        in = std_add_1.out
                      )() with comb_invoke;
                    }
                    bb0_30;
                  }
                }
              }
              invoke while_3_arg0_reg(
                in = std_add_0.out
              )() with comb_invoke0;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @data ref arg_mem_1 = seq_mem_d1(32, 8192, 13);
    @data ref arg_mem_0 = seq_mem_d1(32, 9, 4);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.left = arg_mem_0.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0.addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0.done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1.addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1.done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    static<1> group comb_invoke0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      comb_wire.in = std_add_4.out;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke std_mult_pipe_0(
          right = 32'd3,
          left = in3
        )();
        invoke muli_0_reg(
          in = std_mult_pipe_0.out
        )();
      }
      bb0_2;
      seq {
        invoke std_mult_pipe_1(
          right = 32'd64,
          left = in3
        )();
        invoke muli_1_reg(
          in = std_mult_pipe_1.out
        )();
      }
      seq {
        invoke std_mult_pipe_2(
          right = 32'd64,
          left = in6
        )();
        invoke muli_2_reg(
          in = std_mult_pipe_2.out
        )();
      }
      bb0_8;
      seq {
        invoke std_mult_pipe_3(
          right = arg_mem_1.read_data,
          left = arg_mem_0.read_data
        )();
        invoke muli_3_reg(
          in = std_mult_pipe_3.out
        )();
      }
      invoke ret_arg0_reg(
        in = std_add_4.out
      )() with comb_invoke;
    }
  }
}
Current pass: compile-invoke
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0 {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0 {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1 {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2 {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5 {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7 {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10 {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<1> group comb_invoke1 {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      comb_wire3.in = std_add_1.out;
    }
    static<1> group comb_invoke00 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      comb_wire4.in = std_add_0.out;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              seq {
                invoke1;
                invoke2;
              }
              invoke3;
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      par {
                        invoke4;
                        invoke5;
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              par {
                                invoke6;
                                invoke7;
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group beg_spl_bb0_0 {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3 {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6 {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0 {
      std_mult_pipe_0.go = 1'd1;
      invoke0[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    group invoke1 {
      muli_0_reg.write_en = 1'd1;
      invoke1[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke2 {
      std_mult_pipe_1.go = 1'd1;
      invoke2[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    group invoke3 {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke4 {
      std_mult_pipe_2.go = 1'd1;
      invoke4[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    group invoke5 {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke6 {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7 {
      muli_3_reg.write_en = 1'd1;
      invoke7[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke8 {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      comb_wire.in = std_add_4.out;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      seq {
        invoke0;
        invoke1;
      }
      bb0_2;
      seq {
        invoke2;
        invoke3;
      }
      seq {
        invoke4;
        invoke5;
      }
      bb0_8;
      seq {
        invoke6;
        invoke7;
      }
      invoke8;
    }
  }
}
Current pass: static-inference
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<1> group comb_invoke1 {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      comb_wire3.in = std_add_1.out;
    }
    static<1> group comb_invoke00 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      comb_wire4.in = std_add_0.out;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      @promotable invoke0;
      seq {
        @promotable bb0_00;
        while comb_wire.out {
          seq {
            seq {
              @promotable(4) seq {
                @promotable(3) invoke1;
                @promotable invoke2;
              }
              @promotable invoke3;
              seq {
                @promotable bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      @promotable par {
                        @promotable invoke4;
                        @promotable invoke5;
                      }
                      seq {
                        @promotable bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              @promotable par {
                                @promotable invoke6;
                                @promotable invoke7;
                              }
                              seq {
                                @promotable bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    @promotable bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            @promotable bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      @promotable invoke9;
                    }
                    @promotable bb0_30;
                  }
                }
              }
              @promotable invoke10;
            }
            @promotable bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke0[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke1[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke2[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke4[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke7[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      comb_wire.in = std_add_4.out;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      @promotable(4) seq {
        @promotable(3) invoke0;
        @promotable invoke1;
      }
      bb0_2;
      @promotable(4) seq {
        @promotable(3) invoke2;
        @promotable invoke3;
      }
      @promotable(4) seq {
        @promotable(3) invoke4;
        @promotable invoke5;
      }
      bb0_8;
      @promotable(4) seq {
        @promotable(3) invoke6;
        @promotable invoke7;
      }
      @promotable invoke8;
    }
  }
}
Current pass: static-promotion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<1> group comb_invoke1 {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      comb_wire3.in = std_add_1.out;
    }
    static<1> group comb_invoke00 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      comb_wire4.in = std_add_0.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  invoke100;
                  invoke20;
                }
                invoke30;
              }
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      static<1> par {
                        invoke40;
                        invoke50;
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              static<1> par {
                                invoke60;
                                invoke70;
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke0[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke1[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke2[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke4[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke7[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      comb_wire.in = std_add_4.out;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        invoke00;
        invoke10;
      }
      bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          invoke20;
          invoke30;
        }
        @promotable(4) static<4> seq  {
          invoke40;
          invoke50;
        }
      }
      bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          invoke60;
          invoke70;
        }
        invoke80;
      }
    }
  }
}
Current pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_1_init_1<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
      assign_while_1_init_1[done] = while_1_arg1_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_init_0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = 32'd0;
      assign_while_3_init_0[done] = while_3_arg0_reg.done;
    }
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_1.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group assign_while_3_latch<"promotable"=1> {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      while_3_arg0_reg.write_en = 1'd1;
      while_3_arg0_reg.in = std_add_0.out;
      assign_while_3_latch[done] = while_3_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=1> {
      while_1_arg1_reg.write_en = 1'd1;
      invoke5[done] = while_1_arg1_reg.done;
      while_1_arg1_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke7<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<1> group comb_invoke1 {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
      comb_wire3.in = std_add_1.out;
    }
    static<1> group comb_invoke00 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
      comb_wire4.in = std_add_0.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
    }
    comb group bb0_3 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
    }
    comb group bb0_5 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_7 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  invoke100;
                  invoke20;
                }
                invoke30;
              }
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      static<1> par {
                        invoke40;
                        invoke50;
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              static<1> par {
                                invoke60;
                                invoke70;
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group beg_spl_bb0_0<"promotable"=3> {
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_0[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_0<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_0[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_3<"promotable"=3> {
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_3[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_3<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_3[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_6<"promotable"=3> {
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_6[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_3_reg.done;
    }
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    group ret_assign_0<"promotable"=1> {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
    group invoke0<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke0[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    group invoke1<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke1[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke2[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    group invoke3<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke3[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke4<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke4[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    group invoke5<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke5[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke6<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke6[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    group invoke7<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke7[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke8<"promotable"=1> {
      ret_arg0_reg.write_en = 1'd1;
      invoke8[done] = ret_arg0_reg.done;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<1> group comb_invoke0 {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
      comb_wire.in = std_add_4.out;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    comb group comb_invoke {
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        invoke00;
        invoke10;
      }
      bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          invoke20;
          invoke30;
        }
        @promotable(4) static<4> seq  {
          invoke40;
          invoke50;
        }
      }
      bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          invoke60;
          invoke70;
        }
        invoke80;
      }
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @generated comb_wire3 = std_wire(32);
    @generated comb_wire4 = std_wire(32);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
  }
  control {
    seq {
      invoke0;
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  invoke100;
                  invoke20;
                }
                invoke30;
              }
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      static<1> par {
                        invoke40;
                        invoke50;
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              static<1> par {
                                invoke60;
                                invoke70;
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @generated comb_wire = std_wire(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        invoke00;
        invoke10;
      }
      bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          invoke20;
          invoke30;
        }
        @promotable(4) static<4> seq  {
          invoke40;
          invoke50;
        }
      }
      bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          invoke60;
          invoke70;
        }
        invoke80;
      }
    }
  }
}
Current pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
  }
  control {
    seq {
      invoke0;
      seq {
        bb0_00;
        while comb_wire.out {
          seq {
            seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  invoke100;
                  invoke20;
                }
                invoke30;
              }
              seq {
                bb0_30;
                while comb_wire0.out {
                  seq {
                    seq {
                      static<1> par {
                        invoke40;
                        invoke50;
                      }
                      seq {
                        bb0_50;
                        while comb_wire1.out {
                          seq {
                            seq {
                              static<1> par {
                                invoke60;
                                invoke70;
                              }
                              seq {
                                bb0_70;
                                while comb_wire2.out {
                                  seq {
                                    seq {
                                      invoke8;
                                      assign_while_0_latch;
                                    }
                                    bb0_70;
                                  }
                                }
                              }
                              assign_while_1_latch;
                            }
                            bb0_50;
                          }
                        }
                      }
                      bb0_10;
                      invoke9;
                    }
                    bb0_30;
                  }
                }
              }
              invoke10;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        invoke00;
        invoke10;
      }
      bb0_2;
      static<8> seq  {
        @promotable(4) static<4> seq  {
          invoke20;
          invoke30;
        }
        @promotable(4) static<4> seq  {
          invoke40;
          invoke50;
        }
      }
      bb0_8;
      static<5> seq  {
        @promotable(4) static<4> seq  {
          invoke60;
          invoke70;
        }
        invoke80;
      }
    }
  }
}
Current pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          @promoted static<4> par {
            @promotable(4) static<4> seq  {
              invoke100;
              invoke20;
            }
            invoke30;
          }
          bb0_30;
          while comb_wire0.out {
            seq {
              static<1> par {
                invoke40;
                invoke50;
              }
              bb0_50;
              while comb_wire1.out {
                seq {
                  static<1> par {
                    invoke60;
                    invoke70;
                  }
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static<4> seq  {
        invoke00;
        invoke10;
      }
      bb0_2;
      static<8> seq  {
        invoke20;
        invoke30;
        invoke40;
        invoke50;
      }
      bb0_8;
      static<5> seq  {
        invoke60;
        invoke70;
        invoke80;
      }
    }
  }
}
Current pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd64;
      std_mult_pipe_0.left = while_3_arg0_reg.out;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<1> group invoke40 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<1> group invoke50 {
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke70 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    static<1> group invoke30 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<3> group invoke00 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd3;
      std_mult_pipe_0.left = in3;
    }
    static<1> group invoke10 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke20 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = 32'd64;
      std_mult_pipe_1.left = in3;
    }
    static<1> group invoke30 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke40 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd64;
      std_mult_pipe_2.left = in6;
    }
    static<1> group invoke50 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke60 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.left = arg_mem_0_read_data;
    }
    static<1> group invoke70 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke80 {
      ret_arg0_reg.write_en = 1'd1;
      ret_arg0_reg.in = std_add_4.out;
      std_add_4.right = muli_3_reg.out;
      std_add_4.left = in1;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: merge-static-group
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      invoke0;
      bb0_00;
      while comb_wire.out {
        seq {
          static_par;
          bb0_30;
          while comb_wire0.out {
            seq {
              static_par0;
              bb0_50;
              while comb_wire1.out {
                seq {
                  static_par1;
                  bb0_70;
                  while comb_wire2.out {
                    seq {
                      invoke8;
                      assign_while_0_latch;
                      bb0_70;
                    }
                  }
                  assign_while_1_latch;
                  bb0_50;
                }
              }
              bb0_10;
              invoke9;
              bb0_30;
            }
          }
          invoke10;
          bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      static_seq;
      bb0_2;
      static_seq0;
      bb0_8;
      static_seq1;
    }
  }
}
Current pass: assign-node-id
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
  }
  control {
    seq {
      @NODE_ID(0) invoke0;
      @NODE_ID bb0_00;
      while comb_wire.out {
        seq {
          @NODE_ID(2) static_par;
          @NODE_ID(6) bb0_30;
          while comb_wire0.out {
            seq {
              @NODE_ID(7) static_par0;
              @NODE_ID(8) bb0_50;
              while comb_wire1.out {
                seq {
                  @NODE_ID(9) static_par1;
                  @NODE_ID(10) bb0_70;
                  while comb_wire2.out {
                    seq {
                      @NODE_ID(11) invoke8;
                      @NODE_ID(12) assign_while_0_latch;
                      @NODE_ID(13) bb0_70;
                    }
                  }
                  @NODE_ID(14) assign_while_1_latch;
                  @NODE_ID(15) bb0_50;
                }
              }
              @NODE_ID(16) bb0_10;
              @NODE_ID(17) invoke9;
              @NODE_ID(18) bb0_30;
            }
          }
          @NODE_ID(19) invoke10;
          @NODE_ID(20) bb0_00;
        }
      }
    }
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    out0 = ret_arg0_reg.out;
  }
  control {
    seq {
      @NODE_ID(0) static_seq;
      @NODE_ID(4) bb0_2;
      @NODE_ID(5) static_seq0;
      @NODE_ID(13) bb0_8;
      @NODE_ID(14) static_seq1;
    }
  }
}
Current pass: dfsm
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
  }
  wires {
    group assign_while_0_latch {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = stencil_stencil2d_inner_loop_0_instance.out0;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group assign_while_1_latch {
      std_add_2.right = 32'd1;
      std_add_2.left = while_1_arg0_reg.out;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = while_0_arg1_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_2.out;
      assign_while_1_latch[done] = while_1_arg1_reg.done & while_1_arg0_reg.done ? 1'd1;
    }
    group bb0_10 {
      std_add_4.right = muli_0_reg.out;
      std_add_4.left = while_2_arg0_reg.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd1;
      arg_mem_1_write_data = while_1_arg1_reg.out;
      std_slice_0.in = std_add_4.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group invoke0<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      arg_mem_2_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      arg_mem_2_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      arg_mem_2_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = arg_mem_2_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = arg_mem_2_done;
      arg_mem_0_addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      arg_mem_0_content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      arg_mem_0_write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = arg_mem_0_read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = arg_mem_0_done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke8[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = while_2_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in6 = while_3_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in0 = while_0_arg0_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in1 = while_0_arg1_reg.out;
      stencil_stencil2d_inner_loop_0_instance.in3 = while_1_arg0_reg.out;
    }
    group invoke9<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke9[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_1.out;
      std_add_1.right = 32'd1;
      std_add_1.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      while_3_arg0_reg.write_en = 1'd1;
      invoke10[done] = while_3_arg0_reg.done;
      while_3_arg0_reg.in = std_add_0.out;
      std_add_0.right = 32'd1;
      std_add_0.left = while_3_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_0.right = 32'd126;
      std_slt_0.left = while_3_arg0_reg.out;
      comb_wire.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd62;
      std_slt_1.left = while_2_arg0_reg.out;
      comb_wire0.in = std_slt_1.out;
    }
    static<1> group bb0_50 {
      std_slt_2.right = 32'd3;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_wire1.in = std_slt_2.out;
    }
    static<1> group bb0_70 {
      std_slt_3.right = 32'd3;
      std_slt_3.left = while_0_arg0_reg.out;
      comb_wire2.in = std_slt_3.out;
    }
    static<4> group static_par<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd64;
      std_mult_pipe_0.left = %[0:3] ? while_3_arg0_reg.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_2_arg0_reg.write_en = %0 ? 1'd1;
      while_2_arg0_reg.in = %0 ? 32'd0;
    }
    static<1> group static_par0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      while_1_arg1_reg.write_en = 1'd1;
      while_1_arg1_reg.in = 32'd0;
    }
    static<1> group static_par1 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = while_1_arg1_reg.out;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
  }
  control {
    fsm;
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
  }
  wires {
    group bb0_2 {
      std_add_0.right = muli_0_reg.out;
      std_add_0.left = in0;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_1.in = std_add_0.out;
      arg_mem_0_addr0 = std_slice_1.out;
      bb0_2[done] = arg_mem_0_done;
    }
    group bb0_8 {
      std_add_3.right = muli_2_reg.out;
      std_add_2.right = in5;
      std_add_1.right = in0;
      std_add_1.left = muli_1_reg.out;
      std_add_2.left = std_add_1.out;
      std_add_3.left = std_add_2.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_0.in = std_add_3.out;
      arg_mem_1_addr0 = std_slice_0.out;
      bb0_8[done] = arg_mem_1_done;
    }
    static<4> group static_seq {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd3;
      std_mult_pipe_0.left = %[0:3] ? in3;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<8> group static_seq0 {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? 32'd64;
      std_mult_pipe_1.left = %[0:3] ? in3;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[4:7] ? 1'd1;
      std_mult_pipe_2.right = %[4:7] ? 32'd64;
      std_mult_pipe_2.left = %[4:7] ? in6;
      muli_2_reg.write_en = %7 ? 1'd1;
      muli_2_reg.in = %7 ? std_mult_pipe_2.out;
    }
    static<5> group static_seq1 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.left = %[0:3] ? arg_mem_0_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      ret_arg0_reg.write_en = %4 ? 1'd1;
      ret_arg0_reg.in = %4 ? std_add_4.out;
      std_add_4.right = %4 ? muli_3_reg.out;
      std_add_4.left = %4 ? in1;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
  }
  control {
    fsm;
  }
}
Current pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
  }
  control {
    fsm;
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
  }
  control {
    fsm;
  }
}
Current pass: wrap-main
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
  }
  control {
    fsm;
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
  }
  control {
    fsm;
  }
}
Current pass: go-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
  }
  wires {
    group invoke0 {
      mem_0.addr0 = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
      mem_0.content_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
      mem_0.write_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0[go] ? mem_0.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0[go] ? mem_0.done;
      mem_1.addr0 = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
      mem_1.content_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
      mem_1.write_en = invoke0[go] ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0[go] ? mem_1.read_data;
      stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0[go] ? mem_1.done;
      stencil_stencil2d_inner_loop_0_instance.go = invoke0[go] ? 1'd1;
      invoke0[done] = stencil_stencil2d_inner_loop_0_instance.done;
      stencil_stencil2d_inner_loop_0_instance.in5 = invoke0[go] ? in3;
      stencil_stencil2d_inner_loop_0_instance.in6 = invoke0[go] ? in4;
      stencil_stencil2d_inner_loop_0_instance.in0 = invoke0[go] ? in0;
      stencil_stencil2d_inner_loop_0_instance.in1 = invoke0[go] ? in1;
      stencil_stencil2d_inner_loop_0_instance.in3 = invoke0[go] ? in2;
    }
  }
  control {
    @NODE_ID(0) invoke0;
  }
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
  }
  control {
    fsm;
  }
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm[done] = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
  }
  control {
    fsm;
  }
}
Current pass: wire-inliner
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
  }
  control {}
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
  }
  control {}
}
Current pass: clk-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    mem_1.clk = clk;
    mem_0.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
  }
  control {}
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_3_arg0_reg.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg1_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg1_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    muli_3_reg.clk = clk;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    std_mult_pipe_2.clk = clk;
    muli_1_reg.clk = clk;
    std_mult_pipe_1.clk = clk;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    ret_arg0_reg.clk = clk;
  }
  control {}
}
Current pass: reset-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    invoke0_go.in = go;
    done = invoke0_done.out ? 1'd1;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    mem_1.clk = clk;
    mem_0.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    mem_1.reset = reset;
    mem_0.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
  }
  control {}
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_3.left = fsm_std_add_3_left.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    comb_wire2.in = fsm_comb_wire2_in.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_add_2.left = fsm_std_add_2_left.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    while_2_arg0_reg.write_en = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.in = !while_2_arg0_reg.done ? fsm_while_2_arg0_reg_in.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    comb_wire.in = fsm_comb_wire_in.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_3_arg0_reg.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg1_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg1_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    muli_0_reg.reset = reset;
    std_mult_pipe_0.reset = reset;
    while_3_arg0_reg.reset = reset;
    while_2_arg0_reg.reset = reset;
    while_1_arg1_reg.reset = reset;
    while_1_arg0_reg.reset = reset;
    while_0_arg1_reg.reset = reset;
    while_0_arg0_reg.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    out0 = ret_arg0_reg.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_add_4.left = fsm_std_add_4_left.out;
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    muli_3_reg.clk = clk;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    std_mult_pipe_2.clk = clk;
    muli_1_reg.clk = clk;
    std_mult_pipe_1.clk = clk;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    ret_arg0_reg.clk = clk;
    muli_3_reg.reset = reset;
    std_mult_pipe_3.reset = reset;
    muli_2_reg.reset = reset;
    std_mult_pipe_2.reset = reset;
    muli_1_reg.reset = reset;
    std_mult_pipe_1.reset = reset;
    muli_0_reg.reset = reset;
    std_mult_pipe_0.reset = reset;
    ret_arg0_reg.reset = reset;
  }
  control {}
}
Current pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    done = invoke0_done.out ? 1'd1;
    invoke0_go.in = go;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.clk = clk;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.clk = clk;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.reset = reset;
  }
  control {}
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_add_2.left = fsm_std_add_2_left.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_add_3.left = fsm_std_add_3_left.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.clk = clk;
    while_1_arg1_reg.reset = reset;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.clk = clk;
    while_3_arg0_reg.reset = reset;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.clk = clk;
    while_0_arg1_reg.reset = reset;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    fsm_start.in = go;
    comb_wire2.in = fsm_comb_wire2_in.out;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    out0 = ret_arg0_reg.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.clk = clk;
    muli_3_reg.reset = reset;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.clk = clk;
    ret_arg0_reg.reset = reset;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_2.clk = clk;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.reset = reset;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    std_add_4.left = fsm_std_add_4_left.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_mult_pipe_1.clk = clk;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.reset = reset;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    fsm_start.in = go;
  }
  control {}
}
Current pass: default-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, in2: 32, in3: 32, in4: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_1 = seq_mem_d1(32, 8192, 13);
    @external @data mem_0 = seq_mem_d1(32, 9, 4);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
  }
  wires {
    done = invoke0_done.out ? 1'd1;
    invoke0_go.in = go;
    mem_1.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
    mem_1.clk = clk;
    mem_1.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
    mem_1.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
    mem_1.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = invoke0_go.out ? mem_0.read_data;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = invoke0_go.out ? mem_0.done;
    stencil_stencil2d_inner_loop_0_instance.in6 = invoke0_go.out ? in4;
    stencil_stencil2d_inner_loop_0_instance.in1 = invoke0_go.out ? in1;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = invoke0_go.out ? mem_1.read_data;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = invoke0_go.out ? in2;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = invoke0_go.out ? 1'd1;
    stencil_stencil2d_inner_loop_0_instance.in5 = invoke0_go.out ? in3;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = invoke0_go.out ? mem_1.done;
    stencil_stencil2d_inner_loop_0_instance.in0 = invoke0_go.out ? in0;
    invoke0_done.in = stencil_stencil2d_inner_loop_0_instance.done;
    mem_0.write_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
    mem_0.clk = clk;
    mem_0.addr0 = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
    mem_0.content_en = invoke0_go.out ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
    mem_0.reset = reset;
  }
  control {}
}
component stencil_stencil2d(@clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 4, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 13, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_3 = std_slt(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_3_arg0_reg = std_reg(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg1_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data stencil_stencil2d_inner_loop_0_instance = stencil_stencil2d_inner_loop_0();
    @generated comb_wire = std_wire(1);
    @generated comb_wire0 = std_wire(1);
    @generated comb_wire1 = std_wire(1);
    @generated comb_wire2 = std_wire(1);
    @write_together @interval @go fsm_while_3_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_3_arg0_reg_in = std_wire(32);
    @data fsm_std_slt_0_right = std_wire(32);
    @data fsm_std_slt_0_left = std_wire(32);
    @data fsm_comb_wire_in = std_wire(1);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_while_2_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_2_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_slt_1_right = std_wire(32);
    @data fsm_std_slt_1_left = std_wire(32);
    @data fsm_comb_wire0_in = std_wire(1);
    @write_together @interval @go fsm_while_1_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_1_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_1_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_2_right = std_wire(32);
    @data fsm_std_slt_2_left = std_wire(32);
    @data fsm_comb_wire1_in = std_wire(1);
    @write_together @interval @go fsm_while_0_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg0_reg_in = std_wire(32);
    @write_together @interval @go fsm_while_0_arg1_reg_write_en = std_wire(1);
    @write_together @data fsm_while_0_arg1_reg_in = std_wire(32);
    @data fsm_std_slt_3_right = std_wire(32);
    @data fsm_std_slt_3_left = std_wire(32);
    @data fsm_comb_wire2_in = std_wire(1);
    @data fsm__this_arg_mem_2_addr0 = std_wire(4);
    fsm__this_arg_mem_2_content_en = std_wire(1);
    fsm__this_arg_mem_2_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done = std_wire(1);
    @data fsm__this_arg_mem_0_addr0 = std_wire(13);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done = std_wire(1);
    @go fsm_stencil_stencil2d_inner_loop_0_instance_go = std_wire(1);
    fsm_stencil_stencil2d_inner_loop_0_instance_in5 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in6 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in0 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in1 = std_wire(32);
    fsm_stencil_stencil2d_inner_loop_0_instance_in3 = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    @data fsm__this_arg_mem_1_write_data = std_wire(32);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? 32'd0;
      } => {
        while_3_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 2,
      },
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
        fsm_while_2_arg0_reg_write_en.in = 1'd1;
        fsm_while_2_arg0_reg_in.in = 32'd0;
      } => 4,
      4 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 5,
      5 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd64;
        fsm_std_mult_pipe_0_left.in = while_3_arg0_reg.out;
      } => 6,
      6 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 7,
      },
      8 : {
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = 32'd0;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = 32'd0;
      } => 9,
      9 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 9,
      },
      10 : {
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = 32'd0;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = while_1_arg1_reg.out;
      } => 11,
      11 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 11,
      },
      12 : {
        fsm__this_arg_mem_2_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_addr0;
        fsm__this_arg_mem_2_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_content_en;
        fsm__this_arg_mem_2_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_0_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_2_done;
        fsm__this_arg_mem_0_addr0.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_addr0;
        fsm__this_arg_mem_0_content_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_content_en;
        fsm__this_arg_mem_0_write_en.in = !stencil_stencil2d_inner_loop_0_instance.done ? stencil_stencil2d_inner_loop_0_instance.arg_mem_1_write_en;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_read_data;
        fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.in = !stencil_stencil2d_inner_loop_0_instance.done ? arg_mem_0_done;
        fsm_stencil_stencil2d_inner_loop_0_instance_go.in = !stencil_stencil2d_inner_loop_0_instance.done ? 1'd1;
        fsm_stencil_stencil2d_inner_loop_0_instance_in5.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_2_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in6.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_3_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in0.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg0_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in1.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_0_arg1_reg.out;
        fsm_stencil_stencil2d_inner_loop_0_instance_in3.in = !stencil_stencil2d_inner_loop_0_instance.done ? while_1_arg0_reg.out;
      } => {
        stencil_stencil2d_inner_loop_0_instance.done -> 13,
        default -> 12,
      },
      13 : {
        fsm_std_add_3_right.in = 32'd1;
        fsm_std_add_3_left.in = while_0_arg0_reg.out;
        fsm_while_0_arg1_reg_write_en.in = 1'd1;
        fsm_while_0_arg1_reg_in.in = stencil_stencil2d_inner_loop_0_instance.out0;
        fsm_while_0_arg0_reg_write_en.in = 1'd1;
        fsm_while_0_arg0_reg_in.in = std_add_3.out;
      } => {
        while_0_arg1_reg.done & while_0_arg0_reg.done -> 14,
        default -> 13,
      },
      14 : {
        fsm_std_slt_3_right.in = 32'd3;
        fsm_std_slt_3_left.in = while_0_arg0_reg.out;
        fsm_comb_wire2_in.in = std_slt_3.out;
      } => {
        comb_wire2.out -> 12,
        !comb_wire2.out -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_add_2_right.in = 32'd1;
        fsm_std_add_2_left.in = while_1_arg0_reg.out;
        fsm_while_1_arg1_reg_write_en.in = 1'd1;
        fsm_while_1_arg1_reg_in.in = while_0_arg1_reg.out;
        fsm_while_1_arg0_reg_write_en.in = 1'd1;
        fsm_while_1_arg0_reg_in.in = std_add_2.out;
      } => {
        while_1_arg1_reg.done & while_1_arg0_reg.done -> 16,
        default -> 15,
      },
      16 : {
        fsm_std_slt_2_right.in = 32'd3;
        fsm_std_slt_2_left.in = while_1_arg0_reg.out;
        fsm_comb_wire1_in.in = std_slt_2.out;
      } => {
        comb_wire1.out -> 10,
        !comb_wire1.out -> 17,
        default -> 16,
      },
      17 : {
        fsm_std_add_4_right.in = !arg_mem_1_done ? muli_0_reg.out;
        fsm_std_add_4_left.in = !arg_mem_1_done ? while_2_arg0_reg.out;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd1;
        fsm__this_arg_mem_1_write_data.in = !arg_mem_1_done ? while_1_arg1_reg.out;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_4.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 18,
        default -> 17,
      },
      18 : {
        fsm_while_2_arg0_reg_write_en.in = !while_2_arg0_reg.done ? 1'd1;
        fsm_while_2_arg0_reg_in.in = !while_2_arg0_reg.done ? std_add_1.out;
        fsm_std_add_1_right.in = !while_2_arg0_reg.done ? 32'd1;
        fsm_std_add_1_left.in = !while_2_arg0_reg.done ? while_2_arg0_reg.out;
      } => {
        while_2_arg0_reg.done -> 19,
        default -> 18,
      },
      19 : {
        fsm_std_slt_1_right.in = 32'd62;
        fsm_std_slt_1_left.in = while_2_arg0_reg.out;
        fsm_comb_wire0_in.in = std_slt_1.out;
      } => {
        comb_wire0.out -> 8,
        !comb_wire0.out -> 20,
        default -> 19,
      },
      20 : {
        fsm_while_3_arg0_reg_write_en.in = !while_3_arg0_reg.done ? 1'd1;
        fsm_while_3_arg0_reg_in.in = !while_3_arg0_reg.done ? std_add_0.out;
        fsm_std_add_0_right.in = !while_3_arg0_reg.done ? 32'd1;
        fsm_std_add_0_left.in = !while_3_arg0_reg.done ? while_3_arg0_reg.out;
      } => {
        while_3_arg0_reg.done -> 21,
        default -> 20,
      },
      21 : {
        fsm_std_slt_0_right.in = 32'd126;
        fsm_std_slt_0_left.in = while_3_arg0_reg.out;
        fsm_comb_wire_in.in = std_slt_0.out;
      } => {
        comb_wire.out -> 3,
        !comb_wire.out -> 22,
        default -> 21,
      },
      22 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    arg_mem_1_write_data = !arg_mem_1_done ? fsm__this_arg_mem_1_write_data.out;
    arg_mem_0_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_2_addr0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_addr0.out;
    arg_mem_2_content_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_content_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_2_write_en = !stencil_stencil2d_inner_loop_0_instance.done ? fsm__this_arg_mem_2_write_en.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    comb_wire1.in = fsm_comb_wire1_in.out;
    std_slt_0.left = fsm_std_slt_0_left.out;
    std_slt_0.right = fsm_std_slt_0_right.out;
    while_1_arg0_reg.write_en = fsm_while_1_arg0_reg_write_en.out;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    while_1_arg0_reg.in = fsm_while_1_arg0_reg_in.out;
    std_add_2.left = fsm_std_add_2_left.out;
    std_add_2.right = fsm_std_add_2_right.out;
    std_slt_2.left = fsm_std_slt_2_left.out;
    std_slt_2.right = fsm_std_slt_2_right.out;
    while_0_arg0_reg.write_en = fsm_while_0_arg0_reg_write_en.out;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    while_0_arg0_reg.in = fsm_while_0_arg0_reg_in.out;
    comb_wire.in = fsm_comb_wire_in.out;
    std_add_3.left = fsm_std_add_3_left.out;
    std_add_3.right = fsm_std_add_3_right.out;
    std_add_1.left = !while_2_arg0_reg.done ? fsm_std_add_1_left.out;
    std_add_1.right = !while_2_arg0_reg.done ? fsm_std_add_1_right.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_0_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_0_done.out;
    stencil_stencil2d_inner_loop_0_instance.in6 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in6.out;
    stencil_stencil2d_inner_loop_0_instance.in1 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in1.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_read_data = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_read_data.out;
    stencil_stencil2d_inner_loop_0_instance.clk = clk;
    stencil_stencil2d_inner_loop_0_instance.in3 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in3.out;
    stencil_stencil2d_inner_loop_0_instance.reset = reset;
    stencil_stencil2d_inner_loop_0_instance.go = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_go.out;
    stencil_stencil2d_inner_loop_0_instance.in5 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in5.out;
    stencil_stencil2d_inner_loop_0_instance.arg_mem_1_done = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_arg_mem_1_done.out;
    stencil_stencil2d_inner_loop_0_instance.in0 = !stencil_stencil2d_inner_loop_0_instance.done ? fsm_stencil_stencil2d_inner_loop_0_instance_in0.out;
    std_add_0.left = !while_3_arg0_reg.done ? fsm_std_add_0_left.out;
    std_add_0.right = !while_3_arg0_reg.done ? fsm_std_add_0_right.out;
    while_2_arg0_reg.write_en = fsm_while_2_arg0_reg_write_en.out;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    while_2_arg0_reg.in = fsm_while_2_arg0_reg_in.out;
    while_1_arg1_reg.write_en = fsm_while_1_arg1_reg_write_en.out;
    while_1_arg1_reg.clk = clk;
    while_1_arg1_reg.reset = reset;
    while_1_arg1_reg.in = fsm_while_1_arg1_reg_in.out;
    while_3_arg0_reg.write_en = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_write_en.out;
    while_3_arg0_reg.clk = clk;
    while_3_arg0_reg.reset = reset;
    while_3_arg0_reg.in = !while_3_arg0_reg.done ? fsm_while_3_arg0_reg_in.out;
    std_slt_1.left = fsm_std_slt_1_left.out;
    std_slt_1.right = fsm_std_slt_1_right.out;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    std_slt_3.left = fsm_std_slt_3_left.out;
    std_slt_3.right = fsm_std_slt_3_right.out;
    comb_wire0.in = fsm_comb_wire0_in.out;
    std_add_4.left = !arg_mem_1_done ? fsm_std_add_4_left.out;
    std_add_4.right = !arg_mem_1_done ? fsm_std_add_4_right.out;
    while_0_arg1_reg.write_en = fsm_while_0_arg1_reg_write_en.out;
    while_0_arg1_reg.clk = clk;
    while_0_arg1_reg.reset = reset;
    while_0_arg1_reg.in = fsm_while_0_arg1_reg_in.out;
    fsm_start.in = go;
    comb_wire2.in = fsm_comb_wire2_in.out;
    arg_mem_2_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
component stencil_stencil2d_inner_loop_0(in0: 32, in1: 32, in3: 32, in5: 32, in6: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (out0: 32, @done done: 1, @data arg_mem_1_addr0: 13, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 4, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_1 = std_slice(32, 4);
    @data std_slice_0 = std_slice(32, 13);
    @data std_add_4 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data ret_arg0_reg = std_reg(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_0_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_0_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_0_left = std_wire(32);
    @write_together @interval @go fsm_muli_0_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_0_reg_in = std_wire(32);
    @data fsm_std_add_0_right = std_wire(32);
    @data fsm_std_add_0_left = std_wire(32);
    fsm__this_arg_mem_0_write_en = std_wire(1);
    fsm__this_arg_mem_0_content_en = std_wire(1);
    @data fsm_std_slice_1_in = std_wire(32);
    @data fsm__this_arg_mem_0_addr0 = std_wire(4);
    @write_together @interval(3) @go fsm_std_mult_pipe_1_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_1_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_1_left = std_wire(32);
    @write_together @interval @go fsm_muli_1_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_1_reg_in = std_wire(32);
    @write_together @interval(3) @go fsm_std_mult_pipe_2_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_2_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_2_left = std_wire(32);
    @write_together @interval @go fsm_muli_2_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_2_reg_in = std_wire(32);
    @data fsm_std_add_3_right = std_wire(32);
    @data fsm_std_add_2_right = std_wire(32);
    @data fsm_std_add_1_right = std_wire(32);
    @data fsm_std_add_1_left = std_wire(32);
    @data fsm_std_add_2_left = std_wire(32);
    @data fsm_std_add_3_left = std_wire(32);
    fsm__this_arg_mem_1_write_en = std_wire(1);
    fsm__this_arg_mem_1_content_en = std_wire(1);
    @data fsm_std_slice_0_in = std_wire(32);
    @data fsm__this_arg_mem_1_addr0 = std_wire(13);
    @write_together @interval(3) @go fsm_std_mult_pipe_3_go = std_wire(1);
    @write_together @data fsm_std_mult_pipe_3_right = std_wire(32);
    @write_together @data fsm_std_mult_pipe_3_left = std_wire(32);
    @write_together @interval @go fsm_muli_3_reg_write_en = std_wire(1);
    @write_together @data fsm_muli_3_reg_in = std_wire(32);
    @write_together @interval @go fsm_ret_arg0_reg_write_en = std_wire(1);
    @write_together @data fsm_ret_arg0_reg_in = std_wire(32);
    @data fsm_std_add_4_right = std_wire(32);
    @data fsm_std_add_4_left = std_wire(32);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 2,
      2 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 3,
      3 : {
        fsm_std_mult_pipe_0_go.in = 1'd1;
        fsm_std_mult_pipe_0_right.in = 32'd3;
        fsm_std_mult_pipe_0_left.in = in3;
      } => 4,
      4 : {
        fsm_muli_0_reg_write_en.in = 1'd1;
        fsm_muli_0_reg_in.in = std_mult_pipe_0.out;
      } => 5,
      5 : {
        fsm_std_add_0_right.in = !arg_mem_0_done ? muli_0_reg.out;
        fsm_std_add_0_left.in = !arg_mem_0_done ? in0;
        fsm__this_arg_mem_0_write_en.in = !arg_mem_0_done ? 1'd0;
        fsm__this_arg_mem_0_content_en.in = !arg_mem_0_done ? 1'd1;
        fsm_std_slice_1_in.in = !arg_mem_0_done ? std_add_0.out;
        fsm__this_arg_mem_0_addr0.in = !arg_mem_0_done ? std_slice_1.out;
      } => {
        arg_mem_0_done -> 6,
        default -> 5,
      },
      6 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 7,
      7 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 8,
      8 : {
        fsm_std_mult_pipe_1_go.in = 1'd1;
        fsm_std_mult_pipe_1_right.in = 32'd64;
        fsm_std_mult_pipe_1_left.in = in3;
      } => 9,
      9 : {
        fsm_muli_1_reg_write_en.in = 1'd1;
        fsm_muli_1_reg_in.in = std_mult_pipe_1.out;
      } => 10,
      10 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 11,
      11 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 12,
      12 : {
        fsm_std_mult_pipe_2_go.in = 1'd1;
        fsm_std_mult_pipe_2_right.in = 32'd64;
        fsm_std_mult_pipe_2_left.in = in6;
      } => 13,
      13 : {
        fsm_muli_2_reg_write_en.in = 1'd1;
        fsm_muli_2_reg_in.in = std_mult_pipe_2.out;
      } => 14,
      14 : {
        fsm_std_add_3_right.in = !arg_mem_1_done ? muli_2_reg.out;
        fsm_std_add_2_right.in = !arg_mem_1_done ? in5;
        fsm_std_add_1_right.in = !arg_mem_1_done ? in0;
        fsm_std_add_1_left.in = !arg_mem_1_done ? muli_1_reg.out;
        fsm_std_add_2_left.in = !arg_mem_1_done ? std_add_1.out;
        fsm_std_add_3_left.in = !arg_mem_1_done ? std_add_2.out;
        fsm__this_arg_mem_1_write_en.in = !arg_mem_1_done ? 1'd0;
        fsm__this_arg_mem_1_content_en.in = !arg_mem_1_done ? 1'd1;
        fsm_std_slice_0_in.in = !arg_mem_1_done ? std_add_3.out;
        fsm__this_arg_mem_1_addr0.in = !arg_mem_1_done ? std_slice_0.out;
      } => {
        arg_mem_1_done -> 15,
        default -> 14,
      },
      15 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 16,
      16 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 17,
      17 : {
        fsm_std_mult_pipe_3_go.in = 1'd1;
        fsm_std_mult_pipe_3_right.in = arg_mem_1_read_data;
        fsm_std_mult_pipe_3_left.in = arg_mem_0_read_data;
      } => 18,
      18 : {
        fsm_muli_3_reg_write_en.in = 1'd1;
        fsm_muli_3_reg_in.in = std_mult_pipe_3.out;
      } => 19,
      19 : {
        fsm_ret_arg0_reg_write_en.in = 1'd1;
        fsm_ret_arg0_reg_in.in = std_add_4.out;
        fsm_std_add_4_right.in = muli_3_reg.out;
        fsm_std_add_4_left.in = in1;
      } => 20,
      20 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    out0 = ret_arg0_reg.out;
    arg_mem_0_content_en = !arg_mem_0_done ? fsm__this_arg_mem_0_content_en.out;
    arg_mem_0_addr0 = !arg_mem_0_done ? fsm__this_arg_mem_0_addr0.out;
    arg_mem_0_write_en = !arg_mem_0_done ? fsm__this_arg_mem_0_write_en.out;
    arg_mem_1_write_en = !arg_mem_1_done ? fsm__this_arg_mem_1_write_en.out;
    arg_mem_1_addr0 = !arg_mem_1_done ? fsm__this_arg_mem_1_addr0.out;
    arg_mem_1_content_en = !arg_mem_1_done ? fsm__this_arg_mem_1_content_en.out;
    muli_3_reg.write_en = fsm_muli_3_reg_write_en.out;
    muli_3_reg.clk = clk;
    muli_3_reg.reset = reset;
    muli_3_reg.in = fsm_muli_3_reg_in.out;
    ret_arg0_reg.write_en = fsm_ret_arg0_reg_write_en.out;
    ret_arg0_reg.clk = clk;
    ret_arg0_reg.reset = reset;
    ret_arg0_reg.in = fsm_ret_arg0_reg_in.out;
    std_add_2.left = !arg_mem_1_done ? fsm_std_add_2_left.out;
    std_add_2.right = !arg_mem_1_done ? fsm_std_add_2_right.out;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.left = fsm_std_mult_pipe_3_left.out;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_3.go = fsm_std_mult_pipe_3_go.out;
    std_mult_pipe_3.right = fsm_std_mult_pipe_3_right.out;
    std_mult_pipe_2.clk = clk;
    std_mult_pipe_2.left = fsm_std_mult_pipe_2_left.out;
    std_mult_pipe_2.reset = reset;
    std_mult_pipe_2.go = fsm_std_mult_pipe_2_go.out;
    std_mult_pipe_2.right = fsm_std_mult_pipe_2_right.out;
    std_add_3.left = !arg_mem_1_done ? fsm_std_add_3_left.out;
    std_add_3.right = !arg_mem_1_done ? fsm_std_add_3_right.out;
    std_add_1.left = !arg_mem_1_done ? fsm_std_add_1_left.out;
    std_add_1.right = !arg_mem_1_done ? fsm_std_add_1_right.out;
    muli_0_reg.write_en = fsm_muli_0_reg_write_en.out;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    muli_0_reg.in = fsm_muli_0_reg_in.out;
    muli_1_reg.write_en = fsm_muli_1_reg_write_en.out;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_1_reg.in = fsm_muli_1_reg_in.out;
    std_add_0.left = !arg_mem_0_done ? fsm_std_add_0_left.out;
    std_add_0.right = !arg_mem_0_done ? fsm_std_add_0_right.out;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.left = fsm_std_mult_pipe_0_left.out;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_0.go = fsm_std_mult_pipe_0_go.out;
    std_mult_pipe_0.right = fsm_std_mult_pipe_0_right.out;
    muli_2_reg.write_en = fsm_muli_2_reg_write_en.out;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    muli_2_reg.in = fsm_muli_2_reg_in.out;
    std_slice_0.in = !arg_mem_1_done ? fsm_std_slice_0_in.out;
    std_slice_1.in = !arg_mem_0_done ? fsm_std_slice_1_in.out;
    std_add_4.left = fsm_std_add_4_left.out;
    std_add_4.right = fsm_std_add_4_right.out;
    std_mult_pipe_1.clk = clk;
    std_mult_pipe_1.left = fsm_std_mult_pipe_1_left.out;
    std_mult_pipe_1.reset = reset;
    std_mult_pipe_1.go = fsm_std_mult_pipe_1_go.out;
    std_mult_pipe_1.right = fsm_std_mult_pipe_1_right.out;
    fsm_start.in = go;
    arg_mem_1_write_data = 32'd0;
    arg_mem_0_write_data = 32'd0;
  }
  control {}
}
